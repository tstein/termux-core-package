#!@TERMUX__PREFIX@/bin/bash
# shellcheck shell=bash

if [ -z "${BASH_VERSION:-}" ]; then
    echo "The 'termux-core-tests' script must be run from a 'bash' shell."; return 64 2>/dev/null|| exit 64 # EX__USAGE
fi

termux_core__tests__init() {

TERMUX_CORE__TESTS__COMMAND_TYPE_ID="" # Default: ``
TERMUX_CORE__TESTS__COMMAND_TYPE_NOOP="false" # Default: `false`

NL=$'\n'

TERMUX_CORE__TESTS__TEST_FILTER=""
TERMUX_CORE__TESTS__NO_CLEAN="false" # Default: `false`
TERMUX_CORE__TESTS__TESTS_COUNT="0"

TERMUX_CORE__TESTS__NAME_MAX=255
TERMUX_CORE__TESTS__REGEX__ABSOLUTE_PATH='^(/[^/]+)+$'
TERMUX_CORE__TESTS__REGEX__ROOTFS_OR_ABSOLUTE_PATH='^((/)|((/[^/]+)+))$'
TERMUX_CORE__TESTS__REGEX__APP_PACKAGE_NAME="^[a-zA-Z][a-zA-Z0-9_]*(\.[a-zA-Z][a-zA-Z0-9_]*)+$"



# Set `TERMUX_*` variables to environment variables exported by
# Termux app, otherwise default to build time placeholders.
# This is done to support scoped and dynamic variables design.
# The `TERMUX_ENV__*` variables still use build time placeholders.

TERMUX_ENV__S_ROOT="@TERMUX_ENV__S_ROOT@"


TERMUX_APP__PACKAGE_NAME___N="@TERMUX_ENV__S_TERMUX_APP@PACKAGE_NAME"
termux_core__tests__copy_variable TERMUX_APP__PACKAGE_NAME "$TERMUX_APP__PACKAGE_NAME___N" || return $?
{ [[ ! "$TERMUX_APP__PACKAGE_NAME" =~ $TERMUX_CORE__TESTS__REGEX__APP_PACKAGE_NAME ]] || \
    [ "${#TERMUX_APP__PACKAGE_NAME}" -gt $TERMUX_CORE__TESTS__NAME_MAX ]; } && \
TERMUX_APP__PACKAGE_NAME="@TERMUX_APP__PACKAGE_NAME@"


TERMUX_APP__DATA_DIR___N="@TERMUX_ENV__S_TERMUX_APP@DATA_DIR"
termux_core__tests__copy_variable TERMUX_APP__DATA_DIR "$TERMUX_APP__DATA_DIR___N" || return $?
[[ ! "$TERMUX_APP__DATA_DIR" =~ $TERMUX_CORE__TESTS__REGEX__ABSOLUTE_PATH ]] && \
TERMUX_APP__DATA_DIR="@TERMUX_APP__DATA_DIR@"


TERMUX__ROOTFS___N="@TERMUX_ENV__S_TERMUX@ROOTFS"
termux_core__tests__copy_variable TERMUX__ROOTFS "$TERMUX__ROOTFS___N" || return $?
[[ ! "$TERMUX__ROOTFS" =~ $TERMUX_CORE__TESTS__REGEX__ROOTFS_OR_ABSOLUTE_PATH ]] && \
TERMUX__ROOTFS="@TERMUX__ROOTFS@"

TERMUX__HOME___N="@TERMUX_ENV__S_TERMUX@HOME"
termux_core__tests__copy_variable TERMUX__HOME "$TERMUX__HOME___N" || return $?
[[ ! "$TERMUX__HOME" =~ $TERMUX_CORE__TESTS__REGEX__ABSOLUTE_PATH ]] && \
TERMUX__HOME="@TERMUX__HOME@"

TERMUX__PREFIX___N="@TERMUX_ENV__S_TERMUX@PREFIX"
termux_core__tests__copy_variable TERMUX__PREFIX "$TERMUX__PREFIX___N" || return $?
[[ ! "$TERMUX__PREFIX" =~ $TERMUX_CORE__TESTS__REGEX__ABSOLUTE_PATH ]] && \
TERMUX__PREFIX="@TERMUX__PREFIX@"


TERMUX_CORE__TESTS__LOG_LEVEL___N="@TERMUX_ENV__S_TERMUX_CORE__TESTS@LOG_LEVEL"
termux_core__tests__copy_variable TERMUX_CORE__TESTS__LOG_LEVEL "$TERMUX_CORE__TESTS__LOG_LEVEL___N" || return $?


TERMUX_CORE__TESTS__TESTS_PATH___N="@TERMUX_ENV__S_TERMUX_CORE__TESTS@TESTS_PATH"
TERMUX_CORE__TESTS__TESTS_PATH="$TERMUX__PREFIX/libexec/installed-tests/termux-core"
printf -v "$TERMUX_CORE__TESTS__TESTS_PATH___N" "%s" "$TERMUX_CORE__TESTS__TESTS_PATH" || return $?
export "${TERMUX_CORE__TESTS__TESTS_PATH___N?}" || return $?


TERMUX_CORE__TESTS__MAX_LOG_LEVEL=5 # Default: `5` (VVVERBOSE=5)
{ [[ ! "$TERMUX_CORE__TESTS__LOG_LEVEL" =~ ^[0-9]+$ ]] || [[ "$TERMUX_CORE__TESTS__LOG_LEVEL" -gt "$TERMUX_CORE__TESTS__MAX_LOG_LEVEL" ]]; } && \
TERMUX_CORE__TESTS__LOG_LEVEL=1 # Default: `1` (OFF=0, NORMAL=1, DEBUG=2, VERBOSE=3, VVERBOSE=4 and VVVERBOSE=5)



# Set exit traps.
termux_core__tests__set_traps || return $?

}



function termux_core__tests__log() { local log_level="${1}"; shift; if [[ $TERMUX_CORE__TESTS__LOG_LEVEL -ge $log_level ]]; then echo "@TERMUX__LNAME@-core-tests:" "$@"; fi }
function termux_core__tests__log_literal() { local log_level="${1}"; shift; if [[ $TERMUX_CORE__TESTS__LOG_LEVEL -ge $log_level ]]; then echo -e "@TERMUX__LNAME@-core-tests:" "$@"; fi }
function termux_core__tests__log_error() { echo "@TERMUX__LNAME@-core-tests:" "$@" 1>&2; }


##
# `termux_core__tests__main` [`<argument...>`]
##
termux_core__tests__main() {

    local return_value

    termux_core__tests__init || return $?

    local run_runtime_tests="false"

    # Process the command arguments passed to the script.
    termux_core__tests__process_script_arguments "$@" || return $?
    if [ "$TERMUX_CORE__TESTS__COMMAND_TYPE_NOOP" = "true" ]; then return 0; fi


    termux_core__tests__log 4 "Running 'termux_core__tests__main'"

    if [[ "$TERMUX_CORE__TESTS__COMMAND_TYPE_ID" == *,* ]] || \
            [[ ",runtime,all," != *",$TERMUX_CORE__TESTS__COMMAND_TYPE_ID,"* ]]; then
        termux_core__tests__log_error "Invalid command type id '$TERMUX_CORE__TESTS__COMMAND_TYPE_ID' passed. Must equal 'runtime' or 'all'."
        return 1
    fi


    termux_core__tests__log 1 "Running 'termux-core' tests"

    local tests_start_time
    local tests_end_time
    tests_start_time="$(date "+%s")" || return $?

    [[ ",runtime,all," == *",$TERMUX_CORE__TESTS__COMMAND_TYPE_ID,"* ]] && run_runtime_tests="true"

    termux_core__tests__log 5 "$TERMUX_CORE__TESTS__LOG_LEVEL___N='$TERMUX_CORE__TESTS__LOG_LEVEL'"
    [[ -n "$TERMUX_CORE__TESTS__TEST_FILTER" ]] && termux_core__tests__log 5 "$TERMUX_CORE__TESTS__TEST_FILTER='$TERMUX_CORE__TESTS__TEST_FILTER'"
    termux_core__tests__log 5 "$TERMUX_CORE__TESTS__TESTS_PATH___N='$TERMUX_CORE__TESTS__TESTS_PATH'"


    # Set `TERMUX_CORE__TESTS__TESTS_PATH.
    if [[ ! "$TERMUX_CORE__TESTS__TESTS_PATH" =~ $TERMUX_CORE__TESTS__REGEX__ROOTFS_OR_ABSOLUTE_PATH ]]; then
        termux_core__tests__log_error "The TERMUX_CORE__TESTS__TESTS_PATH '$TERMUX_CORE__TESTS__TESTS_PATH' is either not set or is not an absolute path"
        return 1
    fi


    # Setup variables for runtime tests.
    if [[ "$run_runtime_tests" == "true" ]]; then
        if [[ ! -d "$TMPDIR" ]]; then
            termux_core__tests__log_error "The TMPDIR '$TMPDIR' is either not set or not a directory"
            return 1
        fi


        TERMUX_CORE__TESTS__TMPDIR_PATH="$TMPDIR/termux-core-tests"

        # Ensure test directory is clean and does not contain files from previous run.
        rm -rf "$TERMUX_CORE__TESTS__TMPDIR_PATH" || return $?
        mkdir -p "$TERMUX_CORE__TESTS__TMPDIR_PATH" || return $?
    fi

    TERMUX_CORE__TESTS__SCRIPT_TEST_FILE_NAME="test-script"
    TERMUX_CORE__TESTS__SCRIPT_TEST_FILE_PATH="$TERMUX_CORE__TESTS__TMPDIR_PATH/$TERMUX_CORE__TESTS__SCRIPT_TEST_FILE_NAME"


    # Run runtime tests.
    if [[ "$run_runtime_tests" == "true" ]]; then
        termux_core__tests__runtime_tests__run_command
        return_value=$?
        if [ $return_value -ne 0 ]; then
            return $return_value
        fi

        rm -rf "$TERMUX_CORE__TESTS__TMPDIR_PATH"
    fi

    tests_end_time=$(($(date "+%s") - tests_start_time)) || return $?
    termux_core__tests__log 1 "All $TERMUX_CORE__TESTS__TESTS_COUNT 'termux-core' tests successful in \
$((tests_end_time / 3600 )) hours $(((tests_end_time % 3600) / 60)) minutes $((tests_end_time % 60)) seconds"

    return 0

}



##
# `termux_core__tests__runtime_tests__run_command`
##
termux_core__tests__runtime_tests__run_command() {

    local return_value

    termux_core__tests__log 2 "Running 'runtime' tests"

    termux_core__termux_scoped_env_variable__run_tests || return $?
    termux_core__termux_apps_info_env_variable__run_tests || return $?
    termux_core__termux_apps_info_app_version_name__run_tests || return $?

    return 0

}

termux_core__set_termux_core_test_scoped_env_variables__default() {

    TERMUX_CORE__TESTS__TERMUX_ENV__S_ROOT="$TERMUX_ENV__S_ROOT"
    TERMUX_CORE__TESTS__TERMUX__PACKAGE_NAME="$TERMUX_APP__PACKAGE_NAME"
    TERMUX_CORE__TESTS__TERMUX_APP__DATA_DIR="$TERMUX_APP__DATA_DIR"
    TERMUX_CORE__TESTS__TERMUX__ROOTFS="$TERMUX__ROOTFS"
    TERMUX_CORE__TESTS__TERMUX__HOME="$TERMUX__HOME"
    TERMUX_CORE__TESTS__TERMUX__PREFIX="$TERMUX__PREFIX"

}

termux_core__set_termux_core_test_scoped_env_variables__foo() {

    TERMUX_CORE__TESTS__TERMUX_ENV__S_ROOT="FOO_"
    TERMUX_CORE__TESTS__TERMUX__PACKAGE_NAME="com.foo"
    TERMUX_CORE__TESTS__TERMUX_APP__DATA_DIR="/data/data/com.foo"
    TERMUX_CORE__TESTS__TERMUX__ROOTFS="$TERMUX_CORE__TESTS__TERMUX_APP__DATA_DIR/termux/rootfs/0"
    TERMUX_CORE__TESTS__TERMUX__HOME="$TERMUX_CORE__TESTS__TERMUX__ROOTFS/home"
    TERMUX_CORE__TESTS__TERMUX__PREFIX="$TERMUX_CORE__TESTS__TERMUX__ROOTFS/usr"

}





termux_core__termux_scoped_env_variable__run_tests() {

    termux_core__tests__log 3 "termux_core__termux_scoped_env_variable()"

    termux_core__sh__termux_scoped_env_variable__run_tests || return $?
    termux_core__bash__termux_scoped_env_variable__run_tests || return $?

    return 0

}



termux_core__sh__termux_scoped_env_variable__run_tests() {

    termux_core__tests__log 3 "termux_core__sh__termux_scoped_env_variable()"

    TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME="termux_core__sh__termux_scoped_env_variable__run_test"
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_VAR_TEST

    termux_core__set_termux_core_test_scoped_env_variables__default || return $?
    termux_core__sh__termux_scoped_env_variable__run_tests_for_scope || return $?

    termux_core__set_termux_core_test_scoped_env_variables__foo || return $?
    termux_core__sh__termux_scoped_env_variable__run_tests_for_scope || return $?

    return 0

}

termux_core__sh__termux_scoped_env_variable__run_tests_for_scope() {

    local test_type
    local termux_core__tsev__scope_args

    TERMUX_ENV__S_ROOT="$TERMUX_CORE__TESTS__TERMUX_ENV__S_ROOT"


    termux_core__termux_scoped_env_variable__test__usage "usage" \
        "_" "STRING" || return $?

    termux_core__sh__termux_scoped_env_variable__test__usage "extended-usage" \
        "_" "STRING" || return $?


    local -A test_types=()
    test_types["scope-s"]='s="'"${TERMUX_ENV__S_ROOT}_"'"'
    test_types["scope-ss"]='ss="'_'"'
    test_types["component-name"]='cn="termux"'
    for test_type in "${!test_types[@]}"; do
        termux_core__tsev__scope_args="${test_types["$test_type"]}"

        # `TERMUX__STRING_DEFINED`.
        termux_core__termux_scoped_env_variable__test__termux_string_defined "termux-string-defined_${test_type}" \
            "_" "STRING_DEFINED" \
            "$termux_core__tsev__scope_args"' "STRING_DEFINED"' '"*"' || return $?



        # `TERMUX__STRING_SET`.
        termux_core__termux_scoped_env_variable__test__termux_string_set "termux-string-set_${test_type}" \
            "_" "STRING_SET" \
            "$termux_core__tsev__scope_args"' "STRING_SET"' '"?"' || return $?



        # `TERMUX__PACKAGE_NAME`.
        termux_core__termux_scoped_env_variable__test__termux__package_name "termux-package-name_${test_type}_regex" \
            "_" "PACKAGE_NAME" \
            "$termux_core__tsev__scope_args"' "PACKAGE_NAME"' 'p-="*[!a-zA-Z0-9_.]*"' \
            "$TERMUX_CORE__TESTS__TERMUX__PACKAGE_NAME" \
            "false" "" || return $?

        TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true"
        # shellcheck disable=SC2016
        termux_core__termux_scoped_env_variable__test__termux__package_name "termux-package-name_${test_type}_command" \
            "_" "PACKAGE_NAME" \
            "$termux_core__tsev__scope_args"' "PACKAGE_NAME"' 'c+="is_valid_android_app_package_name"' \
            "$TERMUX_CORE__TESTS__TERMUX__PACKAGE_NAME" \
            "true" 'is_valid_android_app_package_name() { printf "%s\n" "${1:-}" | grep -qE '\''^(()|([a-zA-Z][a-zA-Z0-9_]*(\.[a-zA-Z][a-zA-Z0-9_]*)+))$'\'' && [ "${#1}" -le 255 ]; }' || return $?
        unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST



        # `TERMUX__ROOTFS`.
        termux_core__termux_scoped_env_variable__test__termux_path "termux-rootfs_${test_type}" \
            "_" "ROOTFS" \
            "$termux_core__tsev__scope_args"' "ROOTFS"' 'p+="/|/*[!/]"' \
            "$TERMUX_CORE__TESTS__TERMUX__ROOTFS" || return $?

        termux_core__termux_scoped_env_variable__test__termux_path "termux-rootfs-as-android-rootfs_${test_type}" \
            "_" "ROOTFS" \
            "$termux_core__tsev__scope_args"' "ROOTFS"' 'p+="/|/*[!/]"' \
            "/" || return $?


        # `TERMUX__HOME`.
        termux_core__termux_scoped_env_variable__test__termux_path "termux-home_${test_type}" \
            "_" "HOME" \
            "$termux_core__tsev__scope_args"' "HOME"' 'p+="/*[!/]"' \
            "$TERMUX_CORE__TESTS__TERMUX__HOME" || return $?


        # `TERMUX__PREFIX`.
        termux_core__termux_scoped_env_variable__test__termux_path "termux-prefix_${test_type}" \
            "_" "PREFIX" \
            "$termux_core__tsev__scope_args"' "PREFIX"' 'p+="/*[!/]"' \
            "$TERMUX_CORE__TESTS__TERMUX__PREFIX" || return $?



        # `TERMUX__USER_ID`.
        termux_core__termux_scoped_env_variable__test__termux__user_id "termux-user-id_${test_type}" \
            "_" "USER_ID" \
            "$termux_core__tsev__scope_args"' "USER_ID"' 'p-="'\'\''|*[!0-9]*|0[0-9]*|????*"' || return $?
    done

    local -A test_types=()
    test_types["scope-s"]='s="'"${TERMUX_ENV__S_ROOT}APP__"'"'
    test_types["scope-ss"]='ss="'APP__'"'
    test_types["component-name"]='cn="termux-app"'
    for test_type in "${!test_types[@]}"; do
        termux_core__tsev__scope_args="${test_types["$test_type"]}"

        # `TERMUX_APP__PACKAGE_NAME`.
        termux_core__termux_scoped_env_variable__test__termux_app__package_name "termux-app-package-name_${test_type}_regex" \
            "APP__" "PACKAGE_NAME" \
            "$termux_core__tsev__scope_args"' "PACKAGE_NAME"' 'p-="'\'\''|*[!a-zA-Z0-9_.]*"' \
            "$TERMUX_CORE__TESTS__TERMUX__PACKAGE_NAME" \
            "false" "" || return $?

        TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true"
        # shellcheck disable=SC2016.
        termux_core__termux_scoped_env_variable__test__termux_app__package_name "termux-app-package-name_${test_type}_command" \
            "APP__" "PACKAGE_NAME" \
            "$termux_core__tsev__scope_args"' "PACKAGE_NAME"' 'c+="is_valid_android_app_package_name"' \
            "$TERMUX_CORE__TESTS__TERMUX__PACKAGE_NAME" \
            "true" 'is_valid_android_app_package_name() { printf "%s\n" "${1:-}" | grep -qE '\''^[a-zA-Z][a-zA-Z0-9_]*(\.[a-zA-Z][a-zA-Z0-9_]*)+$'\'' && [ "${#1}" -le 255 ]; }' || return $?
        unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST

        done



    local -A test_types=()
    test_types["scope-s"]='s="'"${TERMUX_ENV__S_ROOT}EXEC__"'"'
    test_types["scope-ss"]='ss="'EXEC__'"'
    test_types["component-name"]='cn="termux-exec"'
    for test_type in "${!test_types[@]}"; do
        termux_core__tsev__scope_args="${test_types["$test_type"]}"

        # `TERMUX_EXEC__PROC_SELF_EXE`.
        # We cannot use `PROC_SELF_EXE` itself as `libtermux-exec` may modify/unset.
        termux_core__termux_scoped_env_variable__test__termux_exec__proc_self_exe "termux-exec-proc-self-exe_${test_type}" \
            "EXEC__" "PROC_SELF_EXE_TEST" \
            "$termux_core__tsev__scope_args"' "PROC_SELF_EXE_TEST"' 'p+="'\'\''|/*[!/]"' \
            "$TERMUX_CORE__TESTS__TERMUX__PREFIX/bin/foo" || return $?

    done

    return 0

}



termux_core__sh__termux_scoped_env_variable__test__usage() {

    termux_core__tests__log 4 "${1}()"

    termux_core__tests__validate_argument_count eq $# 3 termux_core__sh__termux_scoped_env_variable__test__usage "$@" || return $?

    local test_label="$1"
    local var_sub_scope_name="$2"
    local var_sub_name="$3"

    local env_command

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "foo" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_pattern-match-positive_env-valid" \
        "${env_command}" \
        0 "^foo$" \
        get-value _ "ss='$var_sub_scope_name' '$var_sub_name' p+='foo|bar'" || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "baz" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_pattern-match-positive_env-invalid" \
        "${env_command}" \
        81 "^Failed to find a valid value .*$" \
        get-value _ "ss='$var_sub_scope_name' '$var_sub_name' p+='foo|bar'" || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "baz" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_pattern-match-positive_env-invalid_def-valid" \
        "${env_command}" \
        0 "^bar$" \
        get-value _ "ss='$var_sub_scope_name' '$var_sub_name' p+='foo|bar' bar" || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "baz" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_pattern-match-positive_env-invalid_def-invalid" \
        "${env_command}" \
        81 "^Failed to find a valid value .*$" \
        get-value _ "ss='$var_sub_scope_name' '$var_sub_name' p+='foo|bar' qux" || return $?



    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "baz" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_pattern-match-negative_env-valid" \
        "${env_command}" \
        0 "^baz$" \
        get-value _ "ss='$var_sub_scope_name' '$var_sub_name' p-='foo|bar'" || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "foo" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_pattern-match-negative_env-invalid" \
        "${env_command}" \
        81 "^Failed to find a valid value .*$" \
        get-value _ "ss='$var_sub_scope_name' '$var_sub_name' p-='foo|bar'" || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "foo" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_pattern-match-negative_env-invalid_def-valid" \
        "${env_command}" \
        0 "^baz$" \
        get-value _ "ss='$var_sub_scope_name' '$var_sub_name' p-='foo|bar' baz" || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "foo" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_pattern-match-negative_env-invalid_def-invalid" \
        "${env_command}" \
        81 "^Failed to find a valid value .*$" \
        get-value _ "ss='$var_sub_scope_name' '$var_sub_name' p-='foo|bar' bar" || return $?

    return 0

}



termux_core__sh__termux_scoped_env_variable__run_test() {

    termux_core__tests__validate_argument_count ge $# 5 termux_core__sh__termux_scoped_env_variable__run_test "$@" || return $?

    local test_name="$1"
    local pre_test_commands="$2"
    local expected_exit_code="$3"
    local expected_output_regex="$4"
    local termux_core__sh__tsev_command_type="$5"

    local termux_core__sh__tsev_call_command
    local termux_core__sh__tsev_source_command
    local termux_core__sh__tsev_source_output_mode_arg=""
    local termux_core__sh__tsev_source_print_command=""

    if [[ "$termux_core__sh__tsev_command_type" == "get-name" ]] || \
        [[ "$termux_core__sh__tsev_command_type" == "get-value" ]]; then
        termux_core__tests__validate_argument_count eq $# 7 \
            "'termux_core__sh__termux_scoped_env_variable__run_test' for the '$termux_core__sh__tsev_command_type' command" "$@" || return $?

        local termux_core__sh__tsev_source_output_mode="$6"
        local termux_core__sh__tsev_args="$7"

        if [[ "$termux_core__sh__tsev_source_output_mode" == "_" ]]; then
            termux_core__sh__tsev_source_output_mode="output_variable"
        fi

        termux_core__sh__tsev_source_output_mode_arg=" '$termux_core__sh__tsev_source_output_mode'"

        if [[ "$termux_core__sh__tsev_source_output_mode" != "-" ]] && \
                [[ "$termux_core__sh__tsev_source_output_mode" != ">" ]]; then
            termux_core__sh__tsev_source_print_command="${NL}printf '%s' \"\${$termux_core__sh__tsev_source_output_mode:-}\""
        fi
    elif [[ "$termux_core__sh__tsev_command_type" == "set-value" ]] || \
            [[ "$termux_core__sh__tsev_command_type" == "unset-value" ]]; then
        termux_core__tests__validate_argument_count eq $# 7 \
            "'termux_core__sh__termux_scoped_env_variable__run_test' for the '$termux_core__sh__tsev_command_type' command" "$@" || return $?

        local termux_core__sh__tsev_source_print_var="$6"
        local termux_core__sh__tsev_args="$7"

        if [[ "$termux_core__sh__tsev_source_print_var" != "-" ]]; then
            termux_core__sh__tsev_source_print_command="${NL}printf '%s' \"\${$termux_core__sh__tsev_source_print_var:-}\""
        fi
    fi


    pre_test_commands="export TERMUX_ENV__S_ROOT='${TERMUX_ENV__S_ROOT//\'/\'\\\'\'}'${NL}${NL}${pre_test_commands:+"$pre_test_commands${NL}${NL}"}"

    # shellcheck disable=SC2016
    termux_core__sh__tsev_source_command='source_file_from_path() { local source_file="${1:-}"; [ $# -gt 0 ] && shift 1; local source_path; if source_path="$(command -v "$source_file")" && [ -n "$source_path" ]; then . "$source_path" || return $?; else echo "Failed to find the '\''$source_file'\'' file to source." 1>&2; return 1; fi; }'"${NL}${NL}"'
source_file_from_path "termux-scoped-env-variable.sh" --sourcing-script || exit $?'

    if [[ "$termux_core__sh__tsev_command_type" == "get-name" ]] || \
        [[ "$termux_core__sh__tsev_command_type" == "get-value" ]]; then
        if [[ "$TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST" != "true" ]]; then
            termux_core__sh__tsev_call_command="termux-scoped-env-variable.sh"
            termux_core__tests__run_script_test "termux_core__sh__tsev__${test_name}__exec-stdout" \
                "#!/bin/sh${NL}${NL}set -e -u${NL}${NL}${pre_test_commands}$termux_core__sh__tsev_call_command '$termux_core__sh__tsev_command_type' '>' $termux_core__sh__tsev_args" \
                "$expected_exit_code" "$expected_output_regex" || return $?
        fi

        if [[ "$TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST" != "true" ]]; then
            termux_core__sh__tsev_call_command="${termux_core__sh__tsev_source_command}${NL}${NL}termux_core__sh__termux_scoped_env_variable"
            termux_core__tests__run_script_test "termux_core__sh__tsev__${test_name}__source-stdout" \
                "#!/bin/sh${NL}${NL}set -e -u${NL}${NL}${pre_test_commands}$termux_core__sh__tsev_call_command '$termux_core__sh__tsev_command_type' '>' $termux_core__sh__tsev_args" \
                "$expected_exit_code" "$expected_output_regex" || return $?
        fi
    fi

    if [[ "$TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_VAR_TEST" != "true" ]]; then
        termux_core__sh__tsev_call_command="${termux_core__sh__tsev_source_command}${NL}${NL}termux_core__sh__termux_scoped_env_variable"
        termux_core__tests__run_script_test "termux_core__sh__tsev__${test_name}__source-var" \
            "#!/bin/sh${NL}${NL}set -e -u${NL}${NL}${pre_test_commands}$termux_core__sh__tsev_call_command '$termux_core__sh__tsev_command_type'$termux_core__sh__tsev_source_output_mode_arg $termux_core__sh__tsev_args || exit \$?$termux_core__sh__tsev_source_print_command" \
            "$expected_exit_code" "$expected_output_regex" || return $?
    fi

    return 0

}





termux_core__bash__termux_scoped_env_variable__run_tests() {

    termux_core__tests__log 3 "termux_core__bash__termux_scoped_env_variable()"

    TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME="termux_core__bash__termux_scoped_env_variable__run_test"
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_VAR_TEST

    termux_core__set_termux_core_test_scoped_env_variables__default || return $?
    termux_core__bash__termux_scoped_env_variable__run_tests_for_scope || return $?

    termux_core__set_termux_core_test_scoped_env_variables__foo || return $?
    termux_core__bash__termux_scoped_env_variable__run_tests_for_scope || return $?

    return 0

}

termux_core__bash__termux_scoped_env_variable__run_tests_for_scope() {

    local test_type
    local termux_core__tsev__scope_args

    TERMUX_ENV__S_ROOT="$TERMUX_CORE__TESTS__TERMUX_ENV__S_ROOT"


    # Basic usage and errors.
    termux_core__termux_scoped_env_variable__test__usage "usage" \
        "_" "STRING" || return $?

    termux_core__bash__termux_scoped_env_variable__test__usage "extended-usage" \
        "_" "STRING" || return $?



    local -A test_types=()
    test_types["scope-s"]='s="'"${TERMUX_ENV__S_ROOT}_"'"'
    test_types["scope-ss"]='ss="'_'"'
    test_types["component-name"]='cn="termux"'
    for test_type in "${!test_types[@]}"; do
        termux_core__tsev__scope_args="${test_types["$test_type"]}"

        # `TERMUX__STRING_DEFINED`.
        termux_core__termux_scoped_env_variable__test__termux_string_defined "termux-string-defined_${test_type}" \
            "_" "STRING_DEFINED" \
            "$termux_core__tsev__scope_args"' "STRING_DEFINED"' '"*"' || return $?



        # `TERMUX__STRING_SET`.
        termux_core__termux_scoped_env_variable__test__termux_string_set "termux-string-set_${test_type}" \
            "_" "STRING_SET" \
            "$termux_core__tsev__scope_args"' "STRING_SET"' '"?"' || return $?



        # `TERMUX__PACKAGE_NAME`.
        termux_core__termux_scoped_env_variable__test__termux__package_name "termux-package-name_${test_type}_regex" \
            "_" "PACKAGE_NAME" \
            "$termux_core__tsev__scope_args"' "PACKAGE_NAME"' 'r+="^(()|([a-zA-Z][a-zA-Z0-9_]*(\.[a-zA-Z][a-zA-Z0-9_]*)+))$"' \
            "$TERMUX_CORE__TESTS__TERMUX__PACKAGE_NAME" \
            "false" "" || return $?

        TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true"
        # shellcheck disable=SC2016
        termux_core__termux_scoped_env_variable__test__termux__package_name "termux-package-name_${test_type}_command" \
            "_" "PACKAGE_NAME" \
            "$termux_core__tsev__scope_args"' "PACKAGE_NAME"' 'c+="is_valid_android_app_package_name"' \
            "$TERMUX_CORE__TESTS__TERMUX__PACKAGE_NAME" \
            "true" 'is_valid_android_app_package_name() { printf "%s\n" "${1:-}" | grep -qE '\''^(()|([a-zA-Z][a-zA-Z0-9_]*(\.[a-zA-Z][a-zA-Z0-9_]*)+))$'\'' && [ "${#1}" -le 255 ]; }' || return $?
        unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST



        # `TERMUX__ROOTFS`.
        termux_core__termux_scoped_env_variable__test__termux_path "termux-rootfs_${test_type}" \
            "_" "ROOTFS" \
            "$termux_core__tsev__scope_args"' "ROOTFS"' 'r+="^((/)|((/[^/]+)+))$"' \
            "$TERMUX_CORE__TESTS__TERMUX__ROOTFS" || return $?

        termux_core__termux_scoped_env_variable__test__termux_path "termux-rootfs-as-android-rootfs_${test_type}" \
            "_" "ROOTFS" \
            "$termux_core__tsev__scope_args"' "ROOTFS"' 'r+="^((/)|((/[^/]+)+))$"' \
            "/" || return $?


        # `TERMUX__HOME`.
        termux_core__termux_scoped_env_variable__test__termux_path "termux-home_${test_type}" \
            "_" "HOME" \
            "$termux_core__tsev__scope_args"' "HOME"' 'r+="^(/[^/]+)+$"' \
            "$TERMUX_CORE__TESTS__TERMUX__HOME" || return $?


        # `TERMUX__PREFIX`.
        termux_core__termux_scoped_env_variable__test__termux_path "termux-prefix_${test_type}" \
            "_" "PREFIX" \
            "$termux_core__tsev__scope_args"' "PREFIX"' 'r+="^(/[^/]+)+$"' \
            "$TERMUX_CORE__TESTS__TERMUX__PREFIX" || return $?



        # `TERMUX__USER_ID`.
        termux_core__termux_scoped_env_variable__test__termux__user_id "termux-user-id_${test_type}" \
            "_" "USER_ID" \
            "$termux_core__tsev__scope_args"' "USER_ID"' 'r+="^(([0-9])|([1-9][0-9]{0,2}))$"' || return $?
    done



    local -A test_types=()
    test_types["scope-s"]='s="'"${TERMUX_ENV__S_ROOT}APP__"'"'
    test_types["scope-ss"]='ss="'APP__'"'
    test_types["component-name"]='cn="termux-app"'
    for test_type in "${!test_types[@]}"; do
        termux_core__tsev__scope_args="${test_types["$test_type"]}"

        # `TERMUX_APP__PACKAGE_NAME`.
        termux_core__termux_scoped_env_variable__test__termux_app__package_name "termux-app-package-name_${test_type}_regex" \
            "APP__" "PACKAGE_NAME" \
            "$termux_core__tsev__scope_args"' "PACKAGE_NAME"' 'r+="^[a-zA-Z][a-zA-Z0-9_]*(\.[a-zA-Z][a-zA-Z0-9_]*)+$"' \
            "$TERMUX_CORE__TESTS__TERMUX__PACKAGE_NAME" \
            "false" "" || return $?

        TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true"
        # shellcheck disable=SC2016
        termux_core__termux_scoped_env_variable__test__termux_app__package_name "termux-app-package-name_${test_type}_command" \
            "APP__" "PACKAGE_NAME" \
            "$termux_core__tsev__scope_args"' "PACKAGE_NAME"' 'c+="is_valid_android_app_package_name"' \
            "$TERMUX_CORE__TESTS__TERMUX__PACKAGE_NAME" \
            "true" 'is_valid_android_app_package_name() { printf "%s\n" "${1:-}" | grep -qE '\''^[a-zA-Z][a-zA-Z0-9_]*(\.[a-zA-Z][a-zA-Z0-9_]*)+$'\'' && [ "${#1}" -le 255 ]; }' || return $?
        unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST
    done



    local -A test_types=()
    test_types["scope-s"]='s="'"${TERMUX_ENV__S_ROOT}EXEC__"'"'
    test_types["scope-ss"]='ss="'EXEC__'"'
    test_types["component-name"]='cn="termux-exec"'
    for test_type in "${!test_types[@]}"; do
        termux_core__tsev__scope_args="${test_types["$test_type"]}"

        # `TERMUX_EXEC__PROC_SELF_EXE`.
        # We cannot use `PROC_SELF_EXE` itself as `libtermux-exec` may modify/unset.
        termux_core__termux_scoped_env_variable__test__termux_exec__proc_self_exe "termux-exec-proc-self-exe_${test_type}" \
            "EXEC__" "PROC_SELF_EXE_TEST" \
            "$termux_core__tsev__scope_args"' "PROC_SELF_EXE_TEST"' 'r+="^(()|((/[^/]+)+))$"' \
            "$TERMUX_CORE__TESTS__TERMUX__PREFIX/bin/foo" || return $?
    done

    return 0

}



termux_core__bash__termux_scoped_env_variable__test__usage() {

    termux_core__tests__log 4 "${1}()"

    termux_core__tests__validate_argument_count eq $# 3 termux_core__bash__termux_scoped_env_variable__test__usage "$@" || return $?

    local test_label="$1"
    local var_sub_scope_name="$2"
    local var_sub_name="$3"

    local env_command

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "foo" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_regex-match-positive_env-valid" \
        "${env_command}" \
        0 "^foo$" \
        get-value _ "ss='$var_sub_scope_name' '$var_sub_name' r+='^foo|bar$'" || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "baz" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_regex-match-positive_env-invalid" \
        "${env_command}" \
        81 "^Failed to find a valid value .*$" \
        get-value _ "ss='$var_sub_scope_name' '$var_sub_name' r+='^foo|bar$'" || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "baz" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_regex-match-positive_env-invalid_def-valid" \
        "${env_command}" \
        0 "^bar$" \
        get-value _ "ss='$var_sub_scope_name' '$var_sub_name' r+='^foo|bar$' bar" || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "baz" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_regex-match-positive_env-invalid_def-invalid" \
        "${env_command}" \
        81 "^Failed to find a valid value .*$" \
        get-value _ "ss='$var_sub_scope_name' '$var_sub_name' r+='^foo|bar$' qux" || return $?



    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "baz" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_regex-match-negative_env-valid" \
        "${env_command}" \
        0 "^baz$" \
        get-value _ "ss='$var_sub_scope_name' '$var_sub_name' r-='^foo|bar$'" || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "foo" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_regex-match-negative_env-invalid" \
        "${env_command}" \
        81 "^Failed to find a valid value .*$" \
        get-value _ "ss='$var_sub_scope_name' '$var_sub_name' r-='^foo|bar$'" || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "foo" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_regex-match-negative_env-invalid_def-valid" \
        "${env_command}" \
        0 "^baz$" \
        get-value _ "ss='$var_sub_scope_name' '$var_sub_name' r-='^foo|bar$' baz" || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "foo" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_regex-match-negative_env-invalid_def-invalid" \
        "${env_command}" \
        81 "^Failed to find a valid value .*$" \
        get-value _ "ss='$var_sub_scope_name' '$var_sub_name' r-='^foo|bar$' bar" || return $?


    TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true"
    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "foo" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_validator-command_with-command-quoted-arg_env-valid" \
        "${env_command}${NL}${NL}is_valid_scoped_variable() { [ \"\$1\" = \"value\" ] && [ \"\$2\" = \"foo\" ]; }" \
        0 "^foo$" \
        get-value _ "ss='$var_sub_scope_name' '$var_sub_name' c+='is_valid_scoped_variable \"value\"'" || return $?
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST

    TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true"
    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "bar" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_validator-command_with-command-quoted-arg_env-invalid" \
        "${env_command}${NL}${NL}is_valid_scoped_variable() { [ \"\$1\" = \"value\" ] && [ \"\$2\" = \"foo\" ]; }" \
        81 "^Failed to find a valid value .*$" \
        get-value _ "ss='$var_sub_scope_name' '$var_sub_name' c+='is_valid_scoped_variable \"value\"'" || return $?
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST

    TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true"
    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "bar" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_validator-command_with-command-quoted-arg_env-invalid_def-valid" \
        "${env_command}${NL}${NL}is_valid_scoped_variable() { [ \"\$1\" = \"value\" ] && [ \"\$2\" = \"foo\" ]; }" \
        0 "^foo$" \
        get-value _ "ss='$var_sub_scope_name' '$var_sub_name' c+='is_valid_scoped_variable \"value\"' foo" || return $?
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST

    TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true"
    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "bar" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_validator-command_with-command-quoted-arg_env-invalid_def-invalid" \
        "${env_command}${NL}${NL}is_valid_scoped_variable() { [ \"\$1\" = \"value\" ] && [ \"\$2\" = \"foo\" ]; }" \
        81 "^Failed to find a valid value .*$" \
        get-value _ "ss='$var_sub_scope_name' '$var_sub_name' c+='is_valid_scoped_variable \"value\"' baz" || return $?
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST


    TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true"
    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "bar" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_validator-command_with-command-arg_quoted-arg-type-invalid" \
        "${env_command}${NL}${NL}is_valid_scoped_variable() { [ \"\$1\" = \"value\" ] && [ \"\$2\" = \"foo\" ]; }" \
        81 "^Failed to find a valid value .*$" \
        get-value _ "ss='$var_sub_scope_name' '$var_sub_name' c+='is_valid_scoped_variable \"name\"'" || return $?
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST

    return 0

}



termux_core__bash__termux_scoped_env_variable__run_test() {

    termux_core__tests__validate_argument_count ge $# 5 termux_core__bash__termux_scoped_env_variable__run_test "$@" || return $?

    local test_name="$1"
    local pre_test_commands="$2"
    local expected_exit_code="$3"
    local expected_output_regex="$4"
    local termux_core__bash__tsev_command_type="$5"

    local termux_core__bash__tsev_call_command
    local termux_core__bash__tsev_source_command
    local termux_core__bash__tsev_source_output_mode_arg=""
    local termux_core__bash__tsev_source_print_command=""

    if [[ "$termux_core__bash__tsev_command_type" == "get-name" ]] || \
        [[ "$termux_core__bash__tsev_command_type" == "get-value" ]]; then
        termux_core__tests__validate_argument_count eq $# 7 \
            "'termux_core__bash__termux_scoped_env_variable__run_test' for the '$termux_core__bash__tsev_command_type' command" "$@" || return $?

        local termux_core__bash__tsev_source_output_mode="$6"
        local termux_core__bash__tsev_args="$7"

        if [[ "$termux_core__bash__tsev_source_output_mode" == "_" ]]; then
            termux_core__bash__tsev_source_output_mode="output_variable"
        fi

        termux_core__bash__tsev_source_output_mode_arg=" '$termux_core__bash__tsev_source_output_mode'"

        if [[ "$termux_core__bash__tsev_source_output_mode" != "-" ]] && \
                [[ "$termux_core__bash__tsev_source_output_mode" != ">" ]]; then
            termux_core__bash__tsev_source_print_command="${NL}printf '%s' \"\${$termux_core__bash__tsev_source_output_mode:-}\""
        fi
    elif [[ "$termux_core__bash__tsev_command_type" == "set-value" ]] || \
            [[ "$termux_core__bash__tsev_command_type" == "unset-value" ]]; then
        termux_core__tests__validate_argument_count eq $# 7 \
            "'termux_core__bash__termux_scoped_env_variable__run_test' for the '$termux_core__bash__tsev_command_type' command" "$@" || return $?

        local termux_core__bash__tsev_source_print_var="$6"
        local termux_core__bash__tsev_args="$7"

        if [[ "$termux_core__bash__tsev_source_print_var" != "-" ]]; then
            termux_core__bash__tsev_source_print_command="${NL}printf '%s' \"\${$termux_core__bash__tsev_source_print_var:-}\""
        fi
    fi


    pre_test_commands="export TERMUX_ENV__S_ROOT='${TERMUX_ENV__S_ROOT//\'/\'\\\'\'}'${NL}${NL}${pre_test_commands:+"$pre_test_commands${NL}${NL}"}"

    # shellcheck disable=SC2016
    termux_core__bash__tsev_source_command='source_file_from_path() { local source_file="${1:-}"; [ $# -gt 0 ] && shift 1; local source_path; if source_path="$(command -v "$source_file")" && [ -n "$source_path" ]; then source "$source_path" || return $?; else echo "Failed to find the '\''$source_file'\'' file to source." 1>&2; return 1; fi; }'"${NL}${NL}"'
source_file_from_path "termux-scoped-env-variable.bash" || exit $?'

    if [[ "$termux_core__bash__tsev_command_type" == "get-name" ]] || \
        [[ "$termux_core__bash__tsev_command_type" == "get-value" ]]; then
        if [[ "$TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST" != "true" ]]; then
            termux_core__bash__tsev_call_command="termux-scoped-env-variable.bash"
            termux_core__tests__run_script_test "termux_core__bash__tsev__${test_name}__exec-stdout" \
                "#!/bin/bash${NL}${NL}set -e -u${NL}${NL}${pre_test_commands}$termux_core__bash__tsev_call_command '$termux_core__bash__tsev_command_type' '>' $termux_core__bash__tsev_args" \
                "$expected_exit_code" "$expected_output_regex" || return $?
        fi

        if [[ "$TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST" != "true" ]]; then
            termux_core__bash__tsev_call_command="${termux_core__bash__tsev_source_command}${NL}${NL}termux_core__bash__termux_scoped_env_variable"
            termux_core__tests__run_script_test "termux_core__bash__tsev__${test_name}__source-stdout" \
                "#!/bin/bash${NL}${NL}set -e -u${NL}${NL}${pre_test_commands}$termux_core__bash__tsev_call_command '$termux_core__bash__tsev_command_type' '>' $termux_core__bash__tsev_args" \
                "$expected_exit_code" "$expected_output_regex" || return $?
        fi
    fi

    if [[ "$TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_VAR_TEST" != "true" ]]; then
        termux_core__bash__tsev_call_command="${termux_core__bash__tsev_source_command}${NL}${NL}termux_core__bash__termux_scoped_env_variable"
        termux_core__tests__run_script_test "termux_core__bash__tsev__${test_name}__source-var" \
            "#!/bin/bash${NL}${NL}set -e -u${NL}${NL}${pre_test_commands}$termux_core__bash__tsev_call_command '$termux_core__bash__tsev_command_type'$termux_core__bash__tsev_source_output_mode_arg $termux_core__bash__tsev_args || exit \$?$termux_core__bash__tsev_source_print_command" \
            "$expected_exit_code" "$expected_output_regex" || return $?
    fi

    return 0

}





termux_core__termux_scoped_env_variable__test__usage() {

    termux_core__tests__log 4 "${1}()"

    termux_core__tests__validate_argument_count eq $# 3 termux_core__termux_scoped_env_variable__test__usage "$@" || return $?

    local test_label="$1"
    local var_sub_scope_name="$2"
    local var_sub_name="$3"

    local env_command

    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_command_unset" \
        "" \
        64 "^The command '' passed to \
'termux_core__([a-z_]+)__termux_scoped_env_variable' is not valid\..*$" \
        "" - "" || return $?

    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_command_invalid" \
        "" \
        64 "^The command 'get-value1' passed to \
'termux_core__([a-z_]+)__termux_scoped_env_variable' is not valid\..*$" \
        get-value1 - "" || return $?



    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-name_command_args_invalid-1" \
        "" \
        64 "^Invalid argument count 1 for the 'get-name' command\. The \
'termux_core__([a-z_]+)__termux_scoped_env_variable' function expects 3 arguments\..*$" \
        get-name - "" || return $?

    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-name_command_args_invalid-less" \
        "" \
        64 "^Invalid argument count 2 for the 'get-name' command\. The \
'termux_core__([a-z_]+)__termux_scoped_env_variable' function expects 3 arguments\..*$" \
        get-name - '2' || return $?


    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_command_args_invalid-1" \
        "" \
        64 "^Invalid argument count 1 for the 'get-value' command\. The \
'termux_core__([a-z_]+)__termux_scoped_env_variable' function expects minimum 4 arguments\..*$" \
        get-value - "" || return $?

    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_command_args_invalid-less" \
        "" \
        64 "^Invalid argument count 3 for the 'get-value' command\. The \
'termux_core__([a-z_]+)__termux_scoped_env_variable' function expects minimum 4 arguments\..*$" \
        get-value - '2 3' || return $?


    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_set-value_command_args_invalid-1" \
        "" \
        64 "^Invalid argument count 1 for the 'set-value' command\. The \
'termux_core__([a-z_]+)__termux_scoped_env_variable' function expects 3 arguments\..*$" \
        set-value - "1" || return $?

    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_set-value_command_args_invalid-less" \
        "" \
        64 "^Invalid argument count 2 for the 'set-value' command\. The \
'termux_core__([a-z_]+)__termux_scoped_env_variable' function expects 3 arguments\..*$" \
        set-value - '1 2' || return $?


    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_unset-value_command_args_invalid-less" \
        "" \
        64 "^Invalid argument count 1 for the 'unset-value' command\. The \
'termux_core__([a-z_]+)__termux_scoped_env_variable' function expects 2 arguments\..*$" \
        unset-value - "1" || return $?



    TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true" TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST="true"
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_var-to-set_none" \
        "" \
        64 "^The output_mode '' argument passed to \
'termux_core__([a-z_]+)__termux_scoped_env_variable' is not a valid environment variable name, or equal to \`>\` or \`-\`\..*$" \
        get-value "" 'ss="_" "TEST" "*"' || return $?
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST

    TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true" TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST="true"
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_var-to-set_invalid" \
        "" \
        64 "^The output_mode '1foo' argument passed to \
'termux_core__([a-z_]+)__termux_scoped_env_variable' is not a valid environment variable name, or equal to \`>\` or \`-\`\..*$" \
        get-value "1foo" 'ss="_" "TEST" "*"' || return $?
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST


    TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true" TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST="true"
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-name_var-to-set_output-mode-stdout_value-valid" \
        "" \
        0 "^${TERMUX_ENV__S_ROOT}_TEST$" \
        get-name ">" 'ss="_" "TEST"' || return $?
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST

    TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true" TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST="true"
    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "_" "TEST" "foo" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_var-to-set_output-mode-stdout_value-valid" \
        "$env_command" \
        0 "^foo$" \
        get-value ">" 'ss="_" "TEST" "*"' || return $?
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST


    TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true" TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST="true"
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-name_var-to-set_output-mode-dash_value-valid" \
        "" \
        0 "^$" \
        get-name "-" 'ss="_" "TEST"' || return $?
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST

    TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true" TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST="true"
    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "_" "TEST" "foo" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_var-to-set_output-mode-dash_value-valid" \
        "$env_command" \
        0 "^$" \
        get-value "-" 'ss="_" "TEST" "*"' || return $?
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST


    TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true" TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST="true"
    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "_" "TEST" "bar" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-name_var-to-set_var-already-set_value-set" \
        "$env_command" \
        0 "^${TERMUX_ENV__S_ROOT}_TEST$" \
        get-name "${TERMUX_ENV__S_ROOT}_TEST" 'ss="_" "TEST"' || return $?
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST

    TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true" TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST="true"
    get_unset_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "_" "TEST" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-name_var-to-set_var-already-set_value-unset" \
        "$env_command" \
        0 "^${TERMUX_ENV__S_ROOT}_TEST$" \
        get-name "${TERMUX_ENV__S_ROOT}_TEST" 'ss="_" "TEST"' || return $?
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST

    TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true" TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST="true"
    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "_" "TEST" "bar" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_var-to-set_var-already-set_value-set" \
        "$env_command${NL}${NL}is_valid_scoped_variable() { [ \"\$1\" = \"foo\" ]; }" \
        0 "^foo$" \
        get-value "${TERMUX_ENV__S_ROOT}_TEST" 'ss="_" "TEST" c+="is_valid_scoped_variable" foo' || return $?
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST

    TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true" TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST="true"
    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "_" "TEST" "bar" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_var-to-set_var-already-set_value-unset" \
        "$env_command${NL}${NL}is_valid_scoped_variable() { [ -z \"\$1\" ] || [ \"\$1\" = \"foo\" ]; }" \
        0 "^$" \
        get-value "${TERMUX_ENV__S_ROOT}_TEST" 'ss="_" "TEST" c+="is_valid_scoped_variable" ""' || return $?
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST



    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-name_scope_invalid-with-no-arg" \
        "" \
        64 "^The scoped_var_scope_mode 't=' argument for the variable to get passed to \
'termux_core__([a-z_]+)__termux_scoped_env_variable' is not valid\..*$" \
        get-name _ 't= "TEST"' || return $?

    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-name_scope_invalid-with-arg" \
        "" \
        64 "^The scoped_var_scope_mode 't=_' argument for the variable to get passed to \
'termux_core__([a-z_]+)__termux_scoped_env_variable' is not valid\..*$" \
        get-name _ 't="_" "TEST"' || return $?

    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-name_scope_none" \
        "" \
        64 "^The scoped_var_scope_mode argument for the variable to get passed for the 'get-name' command to \
'termux_core__([a-z_]+)__termux_scoped_env_variable' is not set\..*$" \
        get-name _ '"" "TEST"' || return $?


    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_scope_none-with-no-def" \
        "" \
        81 "^Failed to find a valid value.*$" \
        get-value _ '"" "TEST" "?"' || return $?

    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_scope_none-with-def" \
        "" \
        0 "^foo$" \
        get-value _ '"" "TEST" "?" "foo"' || return $?

    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_scope_invalid-with-no-arg" \
        "" \
        64 "^The scoped_var_scope_mode 't=' argument for the variable to get passed to \
'termux_core__([a-z_]+)__termux_scoped_env_variable' is not valid\..*$" \
        get-value _ 't= "TEST" "*"' || return $?

    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_scope_invalid-with-arg" \
        "" \
        64 "^The scoped_var_scope_mode 't=_' argument for the variable to get passed to \
'termux_core__([a-z_]+)__termux_scoped_env_variable' is not valid\..*$" \
        get-value _ 't="_" "TEST" "*"' || return $?

    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_component-name_invalid-with-no-arg" \
        "" \
        64 "^The scoped_var_scope_mode 'cn=' argument for the variable to get passed to \
'termux_core__([a-z_]+)__termux_scoped_env_variable' is not valid\..*$" \
        get-value _ 'cn= "TEST" "*"' || return $?

    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_component-name_unsupported-app" \
        "" \
        64 "^The scoped_var_scope_mode 'cn=bar-app' argument for the variable to get passed to \
'termux_core__([a-z_]+)__termux_scoped_env_variable' is not valid\..*$" \
        get-value _ 'cn="bar-app" "TEST" "*"' || return $?


    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_set-value_scope_invalid-with-no-arg" \
        "" \
        64 "^The scoped_var_scope_mode 't=' argument for the variable to set passed to \
'termux_core__([a-z_]+)__termux_scoped_env_variable' is not valid\..*$" \
        set-value - 't= "TEST" "foo"' || return $?

    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_set-value_scope_invalid-with-arg" \
        "" \
        64 "^The scoped_var_scope_mode 't=_' argument for the variable to set passed to \
'termux_core__([a-z_]+)__termux_scoped_env_variable' is not valid\..*$" \
        set-value - 't="_" "TEST" "foo"' || return $?

    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_set-value_scope_none" \
        "" \
        64 "^The scoped_var_scope_mode argument for the variable to set passed for the 'set-value' command to \
'termux_core__([a-z_]+)__termux_scoped_env_variable' is not set\..*$" \
        set-value - '"" "TEST" "foo"' || return $?


    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_unset-value_scope_invalid-with-no-arg" \
        "" \
        64 "^The scoped_var_scope_mode 't=' argument for the variable to unset passed to \
'termux_core__([a-z_]+)__termux_scoped_env_variable' is not valid\..*$" \
        unset-value - 't= "TEST"' || return $?

    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_unset-value_scope_invalid-with-arg" \
        "" \
        64 "^The scoped_var_scope_mode 't=_' argument for the variable to unset passed to \
'termux_core__([a-z_]+)__termux_scoped_env_variable' is not valid\..*$" \
        unset-value - 't="_" "TEST"' || return $?

    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_unset-value_scope_none" \
        "" \
        64 "^The scoped_var_scope_mode argument for the variable to unset passed for the 'unset-value' command to \
'termux_core__([a-z_]+)__termux_scoped_env_variable' is not set\..*$" \
        unset-value - '"" "TEST"' || return $?



    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_scope-s_no-arg" \
        "" \
        64 "^The scoped_var_scope_mode 's=' argument for the variable to get passed to \
'termux_core__([a-z_]+)__termux_scoped_env_variable' is not valid\..*$" \
        get-value _ 's="" "TEST" "*"' || return $?


    get_export_scoped_variable_command env_command "TERMUX_" "ENV__" "S_ROOT" "1" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_scope-s_var-root-scope-invalid" \
        "$env_command" \
        81 "^Failed to find a valid value .*$" \
        get-value _ 's="_" "TEST" "*"' || return $?

    get_export_scoped_variable_command env_command "TERMUX_" "ENV__" "S_ROOT" "BAR_" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_scope-s_var-sub-scope-invalid" \
        "$env_command" \
        64 "^The name of the variable to get '#TEST' generated in \
'termux_core__([a-z_]+)__termux_scoped_env_variable' is not a valid environment variable name\..*$" \
        get-value _ 's="#" "TEST" "*"' || return $?

    get_export_scoped_variable_command env_command "TERMUX_" "ENV__" "S_ROOT" "BAR_" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_scope-s_var-sub-name-invalid" \
        "$env_command" \
        64 "^The name of the variable to get '_#TEST' generated in \
'termux_core__([a-z_]+)__termux_scoped_env_variable' is not a valid environment variable name\..*$" \
        get-value _ 's="_" "#TEST" "*"' || return $?


    get_export_scoped_variable_command env_command "TERMUX_" "ENV__" "S_ROOT" "BAR_" || return $?
    append_export_scoped_variable_command env_command "BAR_" "_" "VAR" "bar" || return $?
    append_export_scoped_variable_command env_command "BAZ_" "_" "VAR" "baz" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_scope-s_custom-set" \
        "$env_command" \
        0 "^baz$" \
        get-value _ 's="BAZ__" "VAR" "*"' || return $?



    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_scope-ss_no-arg" \
        "" \
        64 "^The scoped_var_scope_mode 'ss=' argument for the variable to get passed to \
'termux_core__([a-z_]+)__termux_scoped_env_variable' is not valid\..*$" \
        get-value _ 'ss="" "TEST" "*"' || return $?


    get_export_scoped_variable_command env_command "TERMUX_" "ENV__" "S_ROOT" "1" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_scope-ss_var-root-scope-invalid" \
        "$env_command" \
        1 "^The TERMUX_ENV__S_ROOT environment variable value '1' while running \
'termux_core__([a-z_]+)__termux_scoped_env_variable' is not a valid environment variable name\..*$" \
        get-value _ 'ss="_" "TEST" "*"' || return $?

    get_export_scoped_variable_command env_command "TERMUX_" "ENV__" "S_ROOT" "BAR_" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_scope-ss_var-sub-scope-invalid" \
        "$env_command" \
        64 "^The name of the variable to get 'BAR_#TEST' generated in \
'termux_core__([a-z_]+)__termux_scoped_env_variable' is not a valid environment variable name\..*$" \
        get-value _ 'ss="#" "TEST" "*"' || return $?

    get_export_scoped_variable_command env_command "TERMUX_" "ENV__" "S_ROOT" "BAR_" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_scope-ss_var-sub-name-invalid" \
        "$env_command" \
        64 "^The name of the variable to get 'BAR__#TEST' generated in \
'termux_core__([a-z_]+)__termux_scoped_env_variable' is not a valid environment variable name\..*$" \
        get-value _ 'ss="_" "#TEST" "*"' || return $?


    get_export_scoped_variable_command env_command "TERMUX_" "ENV__" "S_ROOT" "BAR_" || return $?
    append_export_scoped_variable_command env_command "BAR_" "_" "VAR" "bar" || return $?
    append_export_scoped_variable_command env_command "BAZ_" "_" "VAR" "baz" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_scope-ss_custom-set" \
        "$env_command" \
        0 "^bar$" \
        get-value _ 'ss="_" "VAR" "*"' || return $?

    get_export_scoped_variable_command env_command "TERMUX_" "ENV__" "S_ROOT" "BAR_" || return $?
    append_export_scoped_variable_command env_command "BAR_" "_" "VAR" "bar" || return $?
    append_export_scoped_variable_command env_command "BAZ_" "_" "VAR" "baz" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_scope-ss_custom-unset" \
        "$env_command" \
        81 "^Failed to find a valid value .*$" \
        get-value _ 'ss="FOO_SUB__" "VAR" "*"' || return $?



    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_validator-command_invalid-with-no-arg" \
        "" \
        64 "^The validator command 'unknown_func' \
not found while running 'termux_core__([a-z_]+)__termux_scoped_env_variable' \
that is set in the ([a-z_]+)_validator 'c\+=unknown_func' argument\..*$" \
        get-value _ 'ss="'"$var_sub_scope_name"'" "TEST" c+="unknown_func"' || return $?

    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_validator-command_invalid-with-arg" \
        "" \
        64 "^The validator command 'unknown_func' \
not found while running 'termux_core__([a-z_]+)__termux_scoped_env_variable' \
that is set in the ([a-z_]+)_validator 'c\+=unknown_func arg1' argument\..*$" \
        get-value _ 'ss="'"$var_sub_scope_name"'" "TEST" c+="unknown_func arg1"' || return $?


    TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true"
    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "foo" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_validator-command_no-command-arg_env-valid" \
        "${env_command}${NL}${NL}is_valid_scoped_variable() { [ \"\$1\" = \"foo\" ]; }" \
        0 "^foo$" \
        get-value _ "ss='$var_sub_scope_name' '$var_sub_name' c+='is_valid_scoped_variable'" || return $?
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST

    TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true"
    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "bar" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_validator-command_no-command-arg_env-invalid" \
        "${env_command}${NL}${NL}is_valid_scoped_variable() { [ \"\$1\" = \"foo\" ]; }" \
        81 "^Failed to find a valid value .*$" \
        get-value _ "ss='$var_sub_scope_name' '$var_sub_name' c+='is_valid_scoped_variable'" || return $?
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST

    TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true"
    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "bar" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_validator-command_no-command-arg_env-invalid_def-valid" \
        "${env_command}${NL}${NL}is_valid_scoped_variable() { [ \"\$1\" = \"foo\" ]; }" \
        0 "^foo$" \
        get-value _ "ss='$var_sub_scope_name' '$var_sub_name' c+='is_valid_scoped_variable' foo" || return $?
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST

    TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true"
    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "bar" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_validator-command_no-command-arg_env-invalid_def-invalid" \
        "${env_command}${NL}${NL}is_valid_scoped_variable() { [ \"\$1\" = \"foo\" ]; }" \
        81 "^Failed to find a valid value .*$" \
        get-value _ "ss='$var_sub_scope_name' '$var_sub_name' c+='is_valid_scoped_variable' baz" || return $?
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST


    TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true"
    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "foo" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_validator-command_with-command-arg_env-valid" \
        "${env_command}${NL}${NL}is_valid_scoped_variable() { [ \"\$1\" = \"value\" ] && [ \"\$2\" = \"foo\" ]; }" \
        0 "^foo$" \
        get-value _ "ss='$var_sub_scope_name' '$var_sub_name' c+='is_valid_scoped_variable value'" || return $?
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST

    TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true"
    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "bar" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_validator-command_with-command-arg_env-invalid" \
        "${env_command}${NL}${NL}is_valid_scoped_variable() { [ \"\$1\" = \"value\" ] && [ \"\$2\" = \"foo\" ]; }" \
        81 "^Failed to find a valid value .*$" \
        get-value _ "ss='$var_sub_scope_name' '$var_sub_name' c+='is_valid_scoped_variable value'" || return $?
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST

    TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true"
    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "bar" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_validator-command_with-command-arg_env-invalid_def-valid" \
        "${env_command}${NL}${NL}is_valid_scoped_variable() { [ \"\$1\" = \"value\" ] && [ \"\$2\" = \"foo\" ]; }" \
        0 "^foo$" \
        get-value _ "ss='$var_sub_scope_name' '$var_sub_name' c+='is_valid_scoped_variable value' foo" || return $?
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST

    TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true"
    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "bar" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_validator-command_with-command-arg_env-invalid_def-invalid" \
        "${env_command}${NL}${NL}is_valid_scoped_variable() { [ \"\$1\" = \"value\" ] && [ \"\$2\" = \"foo\" ]; }" \
        81 "^Failed to find a valid value .*$" \
        get-value _ "ss='$var_sub_scope_name' '$var_sub_name' c+='is_valid_scoped_variable value' baz" || return $?
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST


    TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true"
    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "bar" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_validator-command_with-command-arg_arg-type-invalid" \
        "${env_command}${NL}${NL}is_valid_scoped_variable() { [ \"\$1\" = \"value\" ] && [ \"\$2\" = \"foo\" ]; }" \
        81 "^Failed to find a valid value .*$" \
        get-value _ "ss='$var_sub_scope_name' '$var_sub_name' c+='is_valid_scoped_variable name'" || return $?
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST



    get_unset_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_set-value_scope-s_empty" \
        "$env_command" \
        0 "^$" \
        set-value "${TERMUX_ENV__S_ROOT}${var_sub_scope_name}${var_sub_name}" "s='${TERMUX_ENV__S_ROOT}${var_sub_scope_name}' '$var_sub_name' ''" || return $?

    get_unset_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_set-value_scope-s_set" \
        "$env_command" \
        0 "^foo$" \
        set-value "${TERMUX_ENV__S_ROOT}${var_sub_scope_name}${var_sub_name}" "s='${TERMUX_ENV__S_ROOT}${var_sub_scope_name}' '$var_sub_name' foo" || return $?

    get_export_scoped_variable_command env_command "TERMUX_" "ENV__" "S_ROOT" "BAR_" || return $?
    append_unset_scoped_variable_command env_command "BAR_" "$var_sub_scope_name" "$var_sub_name" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_set-value_custom-scope-s_set" \
        "$env_command" \
        0 "^bar$" \
        set-value "BAR_${var_sub_scope_name}${var_sub_name}" "s='BAR_${var_sub_scope_name}' '$var_sub_name' bar" || return $?


    get_unset_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_set-value_scope-ss_empty" \
        "$env_command" \
        0 "^$" \
        set-value "${TERMUX_ENV__S_ROOT}${var_sub_scope_name}${var_sub_name}" "ss='$var_sub_scope_name' '$var_sub_name' ''" || return $?

    get_unset_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_set-value_scope-ss_set" \
        "$env_command" \
        0 "^foo$" \
        set-value "${TERMUX_ENV__S_ROOT}${var_sub_scope_name}${var_sub_name}" "ss='$var_sub_scope_name' '$var_sub_name' foo" || return $?

    get_export_scoped_variable_command env_command "TERMUX_" "ENV__" "S_ROOT" "BAR_" || return $?
    append_unset_scoped_variable_command env_command "BAR_" "$var_sub_scope_name" "$var_sub_name" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_set-value_custom-scope-ss_set" \
        "$env_command" \
        0 "^bar$" \
        set-value "BAR_${var_sub_scope_name}${var_sub_name}" "ss='${var_sub_scope_name}' '$var_sub_name' bar" || return $?



    get_unset_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_unset-value_scope-s_unset" \
        "$env_command" \
        0 "^$" \
        unset-value "${TERMUX_ENV__S_ROOT}${var_sub_scope_name}${var_sub_name}" "s='${TERMUX_ENV__S_ROOT}${var_sub_scope_name}' '$var_sub_name'" || return $?

    get_export_scoped_variable_command env_command "TERMUX_" "ENV__" "S_ROOT" "BAR_" || return $?
    append_unset_scoped_variable_command env_command "BAR_" "$var_sub_scope_name" "$var_sub_name" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_unset-value_custom-scope-s_unset" \
        "$env_command" \
        0 "^$" \
        unset-value "BAR_${var_sub_scope_name}${var_sub_name}" "s='BAR_${var_sub_scope_name}' '$var_sub_name'" || return $?


    get_unset_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_unset-value_scope-ss_empty" \
        "$env_command" \
        0 "^$" \
        unset-value "${TERMUX_ENV__S_ROOT}${var_sub_scope_name}${var_sub_name}" "ss='$var_sub_scope_name' '$var_sub_name'" || return $?

    get_export_scoped_variable_command env_command "TERMUX_" "ENV__" "S_ROOT" "BAR_" || return $?
    append_unset_scoped_variable_command env_command "BAR_" "$var_sub_scope_name" "$var_sub_name" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_unset-value_custom-scope-ss_unset" \
        "$env_command" \
        0 "^$" \
        unset-value "BAR_${var_sub_scope_name}${var_sub_name}" "ss='${var_sub_scope_name}' '$var_sub_name'" || return $?

    return 0

}



termux_core__termux_scoped_env_variable__test__termux_string_defined() {

    termux_core__tests__log 4 "${1}()"

    termux_core__tests__validate_argument_count eq $# 5 termux_core__termux_scoped_env_variable__test__termux_string_defined "$@" || return $?

    local test_label="$1"
    local var_sub_scope_name="$2"
    local var_sub_name="$3"
    local termux_core__tsev__scope_args="$4"
    local termux_core__tsev__validator_and_values_args="$5"

    local env_command

    get_unset_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-unset" \
        "$env_command" \
        81 "^Failed to find a valid value .*$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}" || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-empty" \
        "$env_command" \
        0 "^$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}" || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "foo" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-set" \
        "$env_command" \
        0 "^foo$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}" || return $?

    return 0

}

termux_core__termux_scoped_env_variable__test__termux_string_set() {

    termux_core__tests__log 4 "${1}()"

    termux_core__tests__validate_argument_count eq $# 5 termux_core__termux_scoped_env_variable__test__termux_string_set "$@" || return $?

    local test_label="$1"
    local var_sub_scope_name="$2"
    local var_sub_name="$3"
    local termux_core__tsev__scope_args="$4"
    local termux_core__tsev__validator_and_values_args="$5"

    local env_command

    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-name_valid" \
        "$env_command" \
        0 "^${TERMUX_ENV__S_ROOT}${var_sub_scope_name}${var_sub_name}$" \
        get-name _ "${termux_core__tsev__scope_args}" || return $?

    get_unset_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-unset" \
        "$env_command" \
        81 "^Failed to find a valid value .*$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}" || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-empty" \
        "$env_command" \
        81 "^Failed to find a valid value .*$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}" || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "foo" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-set" \
        "$env_command" \
        0 "^foo$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}" || return $?

    return 0

}

termux_core__termux_scoped_env_variable__test__termux__package_name() {

    termux_core__tests__log 4 "${1}()"

    termux_core__tests__validate_argument_count eq $# 8 termux_core__termux_scoped_env_variable__test__termux__package_name "$@" || return $?

    local test_label="$1"
    local var_sub_scope_name="$2"
    local var_sub_name="$3"
    local termux_core__tsev__scope_args="$4"
    local termux_core__tsev__validator_and_values_args="$5"
    local termux__package_name="$6"
    local run_length_tests="$7"
    local pre_test_commands="$8"

    local env_command
    local termux__package_name_escaped

    termux__package_name_escaped="$(termux_core__tests__escape_string_for_regex "$termux__package_name")" || return $?
    pre_test_commands="${pre_test_commands:+"$pre_test_commands${NL}${NL}"}"

    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-name_valid" \
        "${pre_test_commands}" \
        0 "^${TERMUX_ENV__S_ROOT}${var_sub_scope_name}${var_sub_name}$" \
        get-name _ "${termux_core__tsev__scope_args}" || return $?

    get_unset_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-unset" \
        "${pre_test_commands}${env_command}" \
        0 "^$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}" || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-empty" \
        "${pre_test_commands}${env_command}" \
        0 "^$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}" || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "$termux__package_name" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-valid-chars" \
        "${pre_test_commands}${env_command}" \
        0 "^${termux__package_name_escaped}$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}" || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "#$termux__package_name#" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-invalid-chars" \
        "${pre_test_commands}${env_command}" \
        81 "^Failed to find a valid value .*$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}" || return $?

    if [[ "$run_length_tests" == "true" ]]; then
        get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "foo.$(printf 'x%.0s' {1..251})" || return $?
        "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-valid-length" \
            "${pre_test_commands}${env_command}" \
            0 "^foo\.$(printf 'x%.0s' {1..251})$" \
            get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}" || return $?

        get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "foo.$(printf 'x%.0s' {1..252})" || return $?
        "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-invalid-length" \
            "${pre_test_commands}${env_command}" \
            81 "^Failed to find a valid value .*$" \
            get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}" || return $?
    fi

    return 0

}

termux_core__termux_scoped_env_variable__test__termux_app__package_name() {

    termux_core__tests__log 4 "${1}()"

    termux_core__tests__validate_argument_count eq $# 8 termux_core__termux_scoped_env_variable__test__termux_app__package_name "$@" || return $?

    local test_label="$1"
    local var_sub_scope_name="$2"
    local var_sub_name="$3"
    local termux_core__tsev__scope_args="$4"
    local termux_core__tsev__validator_and_values_args="$5"
    local termux__package_name="$6"
    local run_length_tests="$7"
    local pre_test_commands="$8"

    local env_command
    local termux__package_name_escaped

    termux__package_name_escaped="$(termux_core__tests__escape_string_for_regex "$termux__package_name")" || return $?
    pre_test_commands="${pre_test_commands:+"$pre_test_commands${NL}${NL}"}"

    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-name_valid" \
        "${pre_test_commands}" \
        0 "^${TERMUX_ENV__S_ROOT}${var_sub_scope_name}${var_sub_name}$" \
        get-name _ "${termux_core__tsev__scope_args}" || return $?

    get_unset_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-unset" \
        "${pre_test_commands}${env_command}" \
        81 "^Failed to find a valid value .*$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}" || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-empty" \
        "${pre_test_commands}${env_command}" \
        81 "^Failed to find a valid value .*$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}" || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "$termux__package_name" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-valid-chars" \
        "${pre_test_commands}${env_command}" \
        0 "^${termux__package_name_escaped}$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}" || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" @"TERMUX_APP__PACKAGE_NAME"@ || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-invalid-chars" \
        "${pre_test_commands}${env_command}" \
        81 "^Failed to find a valid value .*$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}" || return $?

    if [[ "$run_length_tests" == "true" ]]; then
        get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "foo.$(printf 'x%.0s' {1..251})" || return $?
        "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-valid-length" \
            "${pre_test_commands}${env_command}" \
            0 "^foo\.$(printf 'x%.0s' {1..251})$" \
            get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}" || return $?

        get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "foo.$(printf 'x%.0s' {1..252})" || return $?
        "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-invalid-length" \
            "${pre_test_commands}${env_command}" \
            81 "^Failed to find a valid value .*$" \
            get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}" || return $?
    fi

    return 0

}



termux_core__termux_scoped_env_variable__test__termux_path() {

    termux_core__tests__log 4 "${1}()"

    termux_core__tests__validate_argument_count eq $# 6 termux_core__termux_scoped_env_variable__test__termux_path "$@" || return $?

    local test_label="$1"
    local var_sub_scope_name="$2"
    local var_sub_name="$3"
    local termux_core__tsev__scope_args="$4"
    local termux_core__tsev__validator_and_values_args="$5"
    local termux_path="$6"

    local env_command
    local termux_path_escaped
    local termux_path_prefix
    local termux_path_prefix_escaped

    termux_path_escaped="$(termux_core__tests__escape_string_for_regex "$termux_path")" || return $?

    if [[ "$termux_path" != "/" ]]; then
        termux_path_prefix="$termux_path"
        termux_path_prefix_escaped="$(termux_core__tests__escape_string_for_regex "$termux_path_prefix")" || return $?
    else
        termux_path_prefix=""
        termux_path_prefix_escaped=""
    fi

    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-name_valid" \
        "$env_command" \
        0 "^${TERMUX_ENV__S_ROOT}${var_sub_scope_name}${var_sub_name}$" \
        get-name _ "${termux_core__tsev__scope_args}" || return $?

    get_unset_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-unset_def-none" \
        "$env_command" \
        81 "^Failed to find a valid value .*$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}" || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "$termux_path" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-valid_def-none" \
        "$env_command" \
        0 "^${termux_path_escaped}$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}" || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" ".$termux_path" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-invalid_def-none" \
        "$env_command" \
        81 "^Failed to find a valid value .*$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}" || return $?


    get_unset_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-unset_def-valid" \
        "$env_command" \
        0 "^${termux_path_escaped}$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}"' "'"${termux_path}"'"' || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" ".$termux_path" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-invalid_def-valid" \
        "$env_command" \
        0 "^${termux_path_prefix_escaped}/def$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}"' "'"${termux_path_prefix}/def"'"' || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" ".$termux_path" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-invalid_def-invalid" \
        "$env_command" \
        81 "^Failed to find a valid value .*$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}"' "'".${termux_path_prefix}/def"'"' || return $?


    get_unset_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-unset_def1-valid_def2-valid" \
        "$env_command" \
        0 "^${termux_path_prefix_escaped}/def1$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}"' "'"${termux_path_prefix}/def1"'" "'"${termux_path_prefix}/def2"'"' || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "$termux_path" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-valid_def1-valid_def2-valid" \
        "$env_command" \
        0 "^${termux_path_escaped}$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}"' "'"${termux_path_prefix}/def1"'" "'"${termux_path_prefix}/def2"'"' || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" ".$termux_path" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-invalid_def1-valid_def2-valid" \
        "$env_command" \
        0 "^${termux_path_prefix_escaped}/def1$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}"' "'"${termux_path_prefix}/def1"'" "'"${termux_path_prefix}/def2"'"' || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" ".$termux_path" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-invalid_def1-invalid_def2-valid" \
        "$env_command" \
        0 "^${termux_path_prefix_escaped}/def2$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}"' "'".${termux_path_prefix}/def1"'" "'"${termux_path_prefix}/def2"'"' || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" ".$termux_path" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-invalid_def1-invalid_def2-invalid" \
        "$env_command" \
        81 "^Failed to find a valid value .*$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}"' "'".${termux_path_prefix}/def1"'" ".'"${termux_path_prefix}/def2"'"' || return $?

    return 0

}


termux_core__termux_scoped_env_variable__test__termux__user_id() {

    termux_core__tests__log 4 "${1}()"

    termux_core__tests__validate_argument_count eq $# 5 termux_core__termux_scoped_env_variable__test__termux__user_id "$@" || return $?

    local test_label="$1"
    local var_sub_scope_name="$2"
    local var_sub_name="$3"
    local termux_core__tsev__scope_args="$4"
    local termux_core__tsev__validator_and_values_args="$5"

    local env_command

    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_get-name_valid" \
        "$env_command" \
        0 "^${TERMUX_ENV__S_ROOT}${var_sub_scope_name}${var_sub_name}$" \
        get-name _ "${termux_core__tsev__scope_args}" || return $?

    get_unset_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-unset" \
        "$env_command" \
        81 "^Failed to find a valid value .*$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}" || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-empty" \
        "$env_command" \
        81 "^Failed to find a valid value .*$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}" || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "0" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-valid-0" \
        "$env_command" \
        0 "^0$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}" || return $?


    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "1" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-valid-1" \
        "$env_command" \
        0 "^1$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}" || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "9" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-valid-9" \
        "$env_command" \
        0 "^9$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}" || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "10" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-valid-10" \
        "$env_command" \
        0 "^10$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}" || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "11" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-valid-11" \
        "$env_command" \
        0 "^11$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}" || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "99" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-valid-99" \
        "$env_command" \
        0 "^99$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}" || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "999" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-valid-999" \
        "$env_command" \
        0 "^999$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}" || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "-0" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-invalid--0" \
        "$env_command" \
        81 "^Failed to find a valid value .*$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}" || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "01" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-invalid-01" \
        "$env_command" \
        81 "^Failed to find a valid value .*$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}" || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "1000" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-invalid-1000" \
        "$env_command" \
        81 "^Failed to find a valid value .*$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}" || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "10000" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-invalid-10000" \
        "$env_command" \
        81 "^Failed to find a valid value .*$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}" || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "uuu" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-invalid-uuu" \
        "$env_command" \
        81 "^Failed to find a valid value .*$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}" || return $?


    get_unset_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-unset_def1-valid" \
        "$env_command" \
        0 "^0$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args} 0" || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-empty_def1-valid" \
        "$env_command" \
        0 "^0$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args} 0" || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "10000" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-invalid-10000_def1-valid" \
        "$env_command" \
        0 "^0$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args} 0" || return $?

    return 0

}


termux_core__termux_scoped_env_variable__test__termux_exec__proc_self_exe() {

    termux_core__tests__log 4 "${1}()"

    termux_core__tests__validate_argument_count eq $# 6 termux_core__termux_scoped_env_variable__test__termux_exec__proc_self_exe "$@" || return $?

    local test_label="$1"
    local var_sub_scope_name="$2"
    local var_sub_name="$3"
    local termux_core__tsev__scope_args="$4"
    local termux_core__tsev__validator_and_values_args="$5"
    local termux_executable_path="$6"

    local env_command
    local termux_executable_path_escaped

    termux_executable_path_escaped="$(termux_core__tests__escape_string_for_regex "$termux_executable_path")" || return $?


    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-name_valid" \
        "$env_command" \
        0 "^${TERMUX_ENV__S_ROOT}${var_sub_scope_name}${var_sub_name}$" \
        get-name _ "${termux_core__tsev__scope_args}" || return $?

    get_unset_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-unset" \
        "$env_command" \
        0 "^$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}" || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-empty" \
        "$env_command" \
        0 "^$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}" || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "$termux_executable_path" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-valid-executable-path" \
        "$env_command" \
        0 "^${termux_executable_path_escaped}$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}" || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" ".$termux_executable_path" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-invalid-executable-path" \
        "$env_command" \
        81 "^Failed to find a valid value .*$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}" || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "/" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-invalid-android-rootfs" \
        "$env_command" \
        81 "^Failed to find a valid value .*$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}" || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "//" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-invalid-android-rootfs-duplicate-path-sep" \
        "$env_command" \
        81 "^Failed to find a valid value .*$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}" || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "/foo" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_env-valid-android-rootfs-subpath" \
        "$env_command" \
        0 "^/foo$" \
        get-value _ "${termux_core__tsev__scope_args} ${termux_core__tsev__validator_and_values_args}" || return $?

    return 0

}





termux_core__termux_apps_info_env_variable__run_tests() {

    termux_core__tests__log 3 "termux_core__termux_apps_info_env_variable()"

    termux_core__sh__termux_apps_info_env_variable__run_tests || return $?
    termux_core__bash__termux_apps_info_env_variable__run_tests || return $?

    return 0

}



termux_core__sh__termux_apps_info_env_variable__run_tests() {

    termux_core__tests__log 3 "termux_core__sh__termux_apps_info_env_variable()"

    TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME="termux_core__sh__termux_apps_info_env_variable__run_test"
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_VAR_TEST

    termux_core__set_termux_core_test_scoped_env_variables__default || return $?
    termux_core__sh__termux_apps_info_env_variable__run_tests_for_scope || return $?

    termux_core__set_termux_core_test_scoped_env_variables__foo || return $?
    termux_core__sh__termux_apps_info_env_variable__run_tests_for_scope || return $?

    return 0

}

termux_core__sh__termux_apps_info_env_variable__run_tests_for_scope() {

    local test_type
    local termux_core__taiev__scope_args

    TERMUX_ENV__S_ROOT="$TERMUX_CORE__TESTS__TERMUX_ENV__S_ROOT"


    termux_core__termux_apps_info_env_variable__test__usage "usage" \
        "APP__" "STRING" || return $?



    local -A test_types=()
    test_types["scope-s"]='s="'"${TERMUX_ENV__S_ROOT}APP__"'"'
    test_types["scope-ss"]='ss="'APP__'"'
    test_types["component-name"]='cn="termux-app"'
    for test_type in "${!test_types[@]}"; do
        termux_core__taiev__scope_args="${test_types["$test_type"]}"

        # `TERMUX_APP__STRING_DEFINED`.
        termux_core__termux_apps_info_env_variable__test__termux_string_defined "termux-string-defined_${test_type}" \
            "APP__" "STRING_DEFINED" \
            "$termux_core__taiev__scope_args"' "STRING_DEFINED"' '"*"' || return $?



        # `TERMUX_APP__STRING_SET`.
        termux_core__termux_apps_info_env_variable__test__termux_string_set "termux-string-set_${test_type}" \
            "APP__" "STRING_SET" \
            "$termux_core__taiev__scope_args"' "STRING_SET"' '"?"' || return $?



        # `TERMUX_APP__TARGET_SDK`.
        termux_core__termux_apps_info_env_variable__test__termux_app__target_sdk "termux-app-target-sdk_${test_type}" \
            "APP__" "TARGET_SDK" \
            "$termux_core__taiev__scope_args"' "TARGET_SDK"' || return $?


        # `TERMUX_APP__DATA_DIR`.
        termux_core__termux_apps_info_env_variable__test__termux_app__data_dir "termux-app-data-dir_${test_type}" \
            "APP__" "DATA_DIR" \
            "$termux_core__taiev__scope_args"' "DATA_DIR"' 'p+="/*[!/]"' \
            "$TERMUX_CORE__TESTS__TERMUX_APP__DATA_DIR" || return $?
    done

    return 0

}

termux_core__sh__termux_apps_info_env_variable__run_test() {

    termux_core__tests__validate_argument_count ge $# 7 termux_core__sh__termux_apps_info_env_variable__run_test "$@" || return $?

    local test_name="$1"
    local pre_test_commands="$2"
    local termux_apps_info_env_file_export="$3"
    local termux_apps_info_env_file_content="$4"
    local expected_exit_code="$5"
    local expected_output_regex="$6"
    local termux_core__sh__taiev_command_type="$7"

    local termux_apps_info_env_file_create_command
    local termux_apps_info_env_file_export_command
    local termux_apps_info_env_file_path
    local termux_core__sh__taiev_call_command
    local termux_core__sh__taiev_source_command
    local termux_core__sh__taiev_source_output_mode_arg=""
    local termux_core__sh__taiev_source_print_command=""

    if [[ "$termux_core__sh__taiev_command_type" == "source-env" ]]; then
        termux_core__tests__validate_argument_count eq $# 10 \
            "'termux_core__sh__termux_apps_info_env_variable__run_test' for the '$termux_core__sh__taiev_command_type' command" "$@" || return $?

        local termux_core__sh__taiev_options="$8"
        local termux_core__sh__taiev_source_print_var="$9"
        local termux_core__sh__taiev_args="${10}"

        if [[ "$termux_core__sh__taiev_source_print_var" != "-" ]]; then
            termux_core__sh__taiev_source_print_command="${NL}printf '%s' \"\${$termux_core__sh__taiev_source_print_var:-}\""
        fi
    elif [[ "$termux_core__sh__taiev_command_type" == "get-value" ]]; then
        termux_core__tests__validate_argument_count eq $# 10 \
            "'termux_core__sh__termux_apps_info_env_variable__run_test' for the '$termux_core__sh__taiev_command_type' command" "$@" || return $?

        local termux_core__sh__taiev_options="$8"
        local termux_core__sh__taiev_source_output_mode="$9"
        local termux_core__sh__taiev_args="${10}"

        if [[ "$termux_core__sh__taiev_source_output_mode" == "_" ]]; then
            termux_core__sh__taiev_source_output_mode="output_variable"
        fi

        termux_core__sh__taiev_source_output_mode_arg=" '$termux_core__sh__taiev_source_output_mode'"

        if [[ "$termux_core__sh__taiev_source_output_mode" != "-" ]] && \
                [[ "$termux_core__sh__taiev_source_output_mode" != ">" ]]; then
            termux_core__sh__taiev_source_print_command="${NL}printf '%s' \"\${$termux_core__sh__taiev_source_output_mode:-}\""
        fi
    fi


    # shellcheck disable=SC2016
    termux_core__sh__taiev_source_command='source_file_from_path() { local source_file="${1:-}"; [ $# -gt 0 ] && shift 1; local source_path; if source_path="$(command -v "$source_file")" && [ -n "$source_path" ]; then . "$source_path" || return $?; else echo "Failed to find the '\''$source_file'\'' file to source." 1>&2; return 1; fi; }'"${NL}${NL}"'
source_file_from_path "termux-apps-info-env-variable.sh" --sourcing-script || exit $?'

    termux_apps_info_env_file_path="$TERMUX_CORE__TESTS__TMPDIR_PATH/termux-apps-info.env"
    if [[ "$termux_apps_info_env_file_export" == "true" ]]; then
        termux_apps_info_env_file_create_command="printf '%s\n' '${termux_apps_info_env_file_content//\'/\'\\\'\'}' > '${termux_apps_info_env_file_path//\'/\'\\\'\'}' || exit \$?"
        get_export_scoped_variable_command termux_apps_info_env_file_export_command "$TERMUX_ENV__S_ROOT" "CORE__" "APPS_INFO_ENV_FILE" "$termux_apps_info_env_file_path" || return $?
    else
        termux_apps_info_env_file_create_command="printf '%s' '' > '${termux_apps_info_env_file_path//\'/\'\\\'\'}' || exit \$?"
        get_unset_scoped_variable_command termux_apps_info_env_file_export_command "$TERMUX_ENV__S_ROOT" "CORE__" "APPS_INFO_ENV_FILE" || return $?
    fi

    pre_test_commands="export TERMUX_ENV__S_ROOT='${TERMUX_ENV__S_ROOT//\'/\'\\\'\'}';${NL}
unset TERMUX_ENV__S_APP;${NL}${NL}\
${termux_apps_info_env_file_create_command}${NL}${NL}${termux_apps_info_env_file_export_command}${NL}${NL}\
${pre_test_commands:+"$pre_test_commands${NL}${NL}"}"

    termux_core__sh__taiev_options="${termux_core__sh__taiev_options:+"$termux_core__sh__taiev_options "}"

    if [[ "$termux_core__sh__taiev_command_type" == "get-value" ]]; then
        if [[ "$TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST" != "true" ]]; then
            termux_core__sh__taiev_call_command="termux-apps-info-env-variable.sh"
            termux_core__tests__run_script_test "termux_core__sh__taiev__${test_name}__exec-stdout" \
                "#!/bin/sh${NL}${NL}set -e -u${NL}${NL}${pre_test_commands}$termux_core__sh__taiev_call_command '$termux_core__sh__taiev_command_type' ${termux_core__sh__taiev_options}'>' $termux_core__sh__taiev_args" \
                "$expected_exit_code" "$expected_output_regex" || return $?
        fi

        if [[ "$TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST" != "true" ]]; then
            termux_core__sh__taiev_call_command="${termux_core__sh__taiev_source_command}${NL}${NL}termux_core__sh__termux_apps_info_env_variable"
            termux_core__tests__run_script_test "termux_core__sh__taiev__${test_name}__source-stdout" \
                "#!/bin/sh${NL}${NL}set -e -u${NL}${NL}${pre_test_commands}$termux_core__sh__taiev_call_command '$termux_core__sh__taiev_command_type' ${termux_core__sh__taiev_options}'>' $termux_core__sh__taiev_args" \
                "$expected_exit_code" "$expected_output_regex" || return $?
        fi
    fi

    if [[ "$TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_VAR_TEST" != "true" ]]; then
        termux_core__sh__taiev_call_command="${termux_core__sh__taiev_source_command}${NL}${NL}termux_core__sh__termux_apps_info_env_variable"
        termux_core__tests__run_script_test "termux_core__sh__taiev__${test_name}__source-var" \
            "#!/bin/sh${NL}${NL}set -e -u${NL}${NL}${pre_test_commands}$termux_core__sh__taiev_call_command '$termux_core__sh__taiev_command_type' ${termux_core__sh__taiev_options}$termux_core__sh__taiev_source_output_mode_arg $termux_core__sh__taiev_args || exit \$?$termux_core__sh__taiev_source_print_command" \
            "$expected_exit_code" "$expected_output_regex" || return $?
    fi

    return 0

}



termux_core__bash__termux_apps_info_env_variable__run_tests() {

    termux_core__tests__log 3 "termux_core__bash__termux_apps_info_env_variable()"

    TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME="termux_core__bash__termux_apps_info_env_variable__run_test"
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_VAR_TEST

    termux_core__set_termux_core_test_scoped_env_variables__default || return $?
    termux_core__bash__termux_apps_info_env_variable__run_tests_for_scope || return $?

    termux_core__set_termux_core_test_scoped_env_variables__foo || return $?
    termux_core__bash__termux_apps_info_env_variable__run_tests_for_scope || return $?

    return 0

}

termux_core__bash__termux_apps_info_env_variable__run_tests_for_scope() {

    local test_type
    local termux_core__taiev__scope_args

    TERMUX_ENV__S_ROOT="$TERMUX_CORE__TESTS__TERMUX_ENV__S_ROOT"


    termux_core__termux_apps_info_env_variable__test__usage "usage" \
        "APP__" "STRING" || return $?



    local -A test_types=()
    test_types["scope-s"]='s="'"${TERMUX_ENV__S_ROOT}APP__"'"'
    test_types["scope-ss"]='ss="'APP__'"'
    test_types["component-name"]='cn="termux-app"'
    for test_type in "${!test_types[@]}"; do
        termux_core__taiev__scope_args="${test_types["$test_type"]}"

        # `TERMUX_APP__STRING_DEFINED`.
        termux_core__termux_apps_info_env_variable__test__termux_string_defined "termux-string-defined_${test_type}" \
            "APP__" "STRING_DEFINED" \
            "$termux_core__taiev__scope_args"' "STRING_DEFINED"' '"*"' || return $?



        # `TERMUX_APP__STRING_SET`.
        termux_core__termux_apps_info_env_variable__test__termux_string_set "termux-string-set_${test_type}" \
            "APP__" "STRING_SET" \
            "$termux_core__taiev__scope_args"' "STRING_SET"' '"?"' || return $?



        # `TERMUX_APP__TARGET_SDK`.
        termux_core__termux_apps_info_env_variable__test__termux_app__target_sdk "termux-app-target-sdk_${test_type}" \
            "APP__" "TARGET_SDK" \
            "$termux_core__taiev__scope_args"' "TARGET_SDK"' || return $?


        # `TERMUX_APP__DATA_DIR`.
        termux_core__termux_apps_info_env_variable__test__termux_app__data_dir "termux-app-data-dir_${test_type}" \
            "APP__" "DATA_DIR" \
            "$termux_core__taiev__scope_args"' "DATA_DIR"' 'r+="^(/[^/]+)+$"' \
            "$TERMUX_CORE__TESTS__TERMUX_APP__DATA_DIR" || return $?
    done

    return 0

}

termux_core__bash__termux_apps_info_env_variable__run_test() {

    termux_core__tests__validate_argument_count ge $# 7 termux_core__bash__termux_apps_info_env_variable__run_test "$@" || return $?

    local test_name="$1"
    local pre_test_commands="$2"
    local termux_apps_info_env_file_export="$3"
    local termux_apps_info_env_file_content="$4"
    local expected_exit_code="$5"
    local expected_output_regex="$6"
    local termux_core__bash__taiev_command_type="$7"

    local termux_apps_info_env_file_create_command
    local termux_apps_info_env_file_export_command
    local termux_apps_info_env_file_path
    local termux_core__bash__taiev_call_command
    local termux_core__bash__taiev_source_command
    local termux_core__bash__taiev_source_output_mode_arg=""
    local termux_core__bash__taiev_source_print_command=""

    if [[ "$termux_core__bash__taiev_command_type" == "source-env" ]]; then
        termux_core__tests__validate_argument_count eq $# 10 \
            "'termux_core__bash__termux_apps_info_env_variable__run_test' for the '$termux_core__bash__taiev_command_type' command" "$@" || return $?

        local termux_core__bash__taiev_options="$8"
        local termux_core__bash__taiev_source_print_var="$9"
        local termux_core__bash__taiev_args="${10}"

        if [[ "$termux_core__bash__taiev_source_print_var" != "-" ]]; then
            termux_core__bash__taiev_source_print_command="${NL}printf '%s' \"\${$termux_core__bash__taiev_source_print_var:-}\""
        fi
    elif [[ "$termux_core__bash__taiev_command_type" == "get-value" ]]; then
        termux_core__tests__validate_argument_count eq $# 10 \
            "'termux_core__bash__termux_apps_info_env_variable__run_test' for the '$termux_core__bash__taiev_command_type' command" "$@" || return $?

        local termux_core__bash__taiev_options="$8"
        local termux_core__bash__taiev_source_output_mode="$9"
        local termux_core__bash__taiev_args="${10}"

        if [[ "$termux_core__bash__taiev_source_output_mode" == "_" ]]; then
            termux_core__bash__taiev_source_output_mode="output_variable"
        fi

        termux_core__bash__taiev_source_output_mode_arg=" '$termux_core__bash__taiev_source_output_mode'"

        if [[ "$termux_core__bash__taiev_source_output_mode" != "-" ]] && \
                [[ "$termux_core__bash__taiev_source_output_mode" != ">" ]]; then
            termux_core__bash__taiev_source_print_command="${NL}printf '%s' \"\${$termux_core__bash__taiev_source_output_mode:-}\""
        fi
    fi


    # shellcheck disable=SC2016
    termux_core__bash__taiev_source_command='source_file_from_path() { local source_file="${1:-}"; [ $# -gt 0 ] && shift 1; local source_path; if source_path="$(command -v "$source_file")" && [ -n "$source_path" ]; then source "$source_path" || return $?; else echo "Failed to find the '\''$source_file'\'' file to source." 1>&2; return 1; fi; }'"${NL}${NL}"'
source_file_from_path "termux-apps-info-env-variable.bash" || exit $?'

    termux_apps_info_env_file_path="$TERMUX_CORE__TESTS__TMPDIR_PATH/termux-apps-info.env"
    if [[ "$termux_apps_info_env_file_export" == "true" ]]; then
        termux_apps_info_env_file_create_command="printf '%s\n' '${termux_apps_info_env_file_content//\'/\'\\\'\'}' > '${termux_apps_info_env_file_path//\'/\'\\\'\'}' || exit \$?"
        get_export_scoped_variable_command termux_apps_info_env_file_export_command "$TERMUX_ENV__S_ROOT" "CORE__" "APPS_INFO_ENV_FILE" "$termux_apps_info_env_file_path" || return $?
    else
        termux_apps_info_env_file_create_command="printf '%s' '' > '${termux_apps_info_env_file_path//\'/\'\\\'\'}' || exit \$?"
        get_unset_scoped_variable_command termux_apps_info_env_file_export_command "$TERMUX_ENV__S_ROOT" "CORE__" "APPS_INFO_ENV_FILE" || return $?
    fi

    pre_test_commands="export TERMUX_ENV__S_ROOT='${TERMUX_ENV__S_ROOT//\'/\'\\\'\'}';${NL}
unset TERMUX_ENV__S_APP;${NL}${NL}\
${termux_apps_info_env_file_create_command}${NL}${NL}${termux_apps_info_env_file_export_command}${NL}${NL}\
${pre_test_commands:+"$pre_test_commands${NL}${NL}"}"

    termux_core__bash__taiev_options="${termux_core__bash__taiev_options:+"$termux_core__bash__taiev_options "}"

    if [[ "$termux_core__bash__taiev_command_type" == "get-value" ]]; then
        if [[ "$TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST" != "true" ]]; then
            termux_core__bash__taiev_call_command="termux-apps-info-env-variable.bash"
            termux_core__tests__run_script_test "termux_core__bash__taiev__${test_name}__exec-stdout" \
                "#!/bin/bash${NL}${NL}set -e -u${NL}${NL}${pre_test_commands}$termux_core__bash__taiev_call_command '$termux_core__bash__taiev_command_type' ${termux_core__bash__taiev_options}'>' $termux_core__bash__taiev_args" \
                "$expected_exit_code" "$expected_output_regex" || return $?
        fi

        if [[ "$TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST" != "true" ]]; then
            termux_core__bash__taiev_call_command="${termux_core__bash__taiev_source_command}${NL}${NL}termux_core__bash__termux_apps_info_env_variable"
            termux_core__tests__run_script_test "termux_core__bash__taiev__${test_name}__source-stdout" \
                "#!/bin/bash${NL}${NL}set -e -u${NL}${NL}${pre_test_commands}$termux_core__bash__taiev_call_command '$termux_core__bash__taiev_command_type' ${termux_core__bash__taiev_options}'>' $termux_core__bash__taiev_args" \
                "$expected_exit_code" "$expected_output_regex" || return $?
        fi
    fi

    if [[ "$TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_VAR_TEST" != "true" ]]; then
        termux_core__bash__taiev_call_command="${termux_core__bash__taiev_source_command}${NL}${NL}termux_core__bash__termux_apps_info_env_variable"
        termux_core__tests__run_script_test "termux_core__bash__taiev__${test_name}__source-var" \
            "#!/bin/bash${NL}${NL}set -e -u${NL}${NL}${pre_test_commands}$termux_core__bash__taiev_call_command '$termux_core__bash__taiev_command_type' ${termux_core__bash__taiev_options}$termux_core__bash__taiev_source_output_mode_arg $termux_core__bash__taiev_args || exit \$?$termux_core__bash__taiev_source_print_command" \
            "$expected_exit_code" "$expected_output_regex" || return $?
    fi

    return 0

}



termux_core__termux_apps_info_env_variable__test__usage() {

    termux_core__tests__log 4 "${1}()"

    termux_core__tests__validate_argument_count eq $# 3 termux_core__termux_apps_info_env_variable__test__usage "$@" || return $?

    local test_label="$1"
    local var_sub_scope_name="$2"
    local var_sub_name="$3"

    local env_command
    local env_file
    local test_type

    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_command_unset" \
        "" \
        "false" "" \
        64 "^The command '' passed to \
'termux_core__([a-z_]+)__termux_apps_info_env_variable' is not valid\..*$" \
        "" "" - "" || return $?

    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_command_invalid" \
        "" \
        "false" "" \
        64 "^The command 'get-value1' passed to \
'termux_core__([a-z_]+)__termux_apps_info_env_variable' is not valid\..*$" \
        get-value1 "" - "" || return $?



    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_source-env_command_args_invalid-more" \
        "" \
        "false" "" \
        64 "^Invalid argument count 1 for the 'source-env' command\. The \
'termux_core__([a-z_]+)__termux_apps_info_env_variable' function expects 0 arguments\..*$" \
        "source-env" "" - "1" || return $?


    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_command_args_invalid-1" \
        "" \
        "false" "" \
        64 "^Invalid argument count 1 for the 'get-value' command\. The \
'termux_core__([a-z_]+)__termux_apps_info_env_variable' function expects minimum 4 arguments\..*$" \
        get-value "" - "" || return $?

    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_command_args_invalid-less" \
        "" \
        "false" "" \
        64 "^Invalid argument count 3 for the 'get-value' command\. The \
'termux_core__([a-z_]+)__termux_apps_info_env_variable' function expects minimum 4 arguments\..*$" \
        get-value "" - '2 3' || return $?



    TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true" TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST="true"
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_var-to-set_none" \
        "" \
        "false" "" \
        64 "^The output_mode '' argument passed to \
'termux_core__([a-z_]+)__termux_scoped_env_variable' is not a valid environment variable name, or equal to \`>\` or \`-\`\..*$" \
        get-value "--skip-sourcing" "" 'ss="APP__" "TEST" "*"' || return $?
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST

    TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true" TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST="true"
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_var-to-set_invalid" \
        "" \
        "false" "" \
        64 "^The output_mode '1foo' argument passed to \
'termux_core__([a-z_]+)__termux_scoped_env_variable' is not a valid environment variable name, or equal to \`>\` or \`-\`\..*$" \
        get-value "--skip-sourcing" "1foo" 'ss="APP__" "TEST" "*"' || return $?
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST


    TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true" TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST="true"
    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "APP__" "TEST" "foo" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_var-to-set_output-mode-stdout_value-valid" \
        "$env_command" \
        "false" "" \
        0 "^foo$" \
        get-value "--skip-sourcing" ">" 'ss="APP__" "TEST" "*"' || return $?
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST

    TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true" TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST="true"
    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "APP__" "TEST" "foo" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_var-to-set_output-mode-dash_value-valid" \
        "$env_command" \
        "false" "" \
        0 "^$" \
        get-value "--skip-sourcing" "-" 'ss="APP__" "TEST" "*"' || return $?
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST



    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "BAR_APP__" "TEST" "bar" || return $?
    get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "BAR_APP__" "TEST" "foo" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_source-env_value-set" \
        "$env_command" \
        "true" "$env_file" \
        0 "^foo$" \
        source-env "" "${TERMUX_ENV__S_ROOT}BAR_APP__TEST" "" || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "BAR_APP__" "TEST" "bar" || return $?
    get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "BAR_APP__" "TEST" "" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_source-env_value-empty" \
        "$env_command" \
        "true" "$env_file" \
        0 "^$" \
        source-env "" "${TERMUX_ENV__S_ROOT}BAR_APP__TEST" "" || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "BAR_APP__" "TEST" "bar" || return $?
    get_unset_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "BAR_APP__" "TEST" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_source-env_value-unset" \
        "$env_command" \
        "true" "$env_file" \
        0 "^$" \
        source-env "" "${TERMUX_ENV__S_ROOT}BAR_APP__TEST" "" || return $?

    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "BAR_APP__" "TEST" "bar" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_source-env_value-none" \
        "$env_command" \
        "true" "" \
        0 "^bar$" \
        source-env "" "${TERMUX_ENV__S_ROOT}BAR_APP__TEST" "" || return $?



    TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true" TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST="true"
    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "BAR_APP__" "TEST" "bar" || return $?
    get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "BAR_APP__" "TEST" "foo" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_var-to-set_var-already-set_value-set" \
        "$env_command" \
        "true" "$env_file" \
        0 "^foo$" \
        get-value "" "${TERMUX_ENV__S_ROOT}BAR_APP__TEST" 'ss="BAR_APP__" "TEST" "*"' || return $?
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST

    TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true" TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST="true"
    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "BAR_APP__" "TEST" "bar" || return $?
    get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "BAR_APP__" "TEST" "" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_var-to-set_var-already-set_value-empty" \
        "$env_command" \
        "true" "$env_file" \
        0 "^$" \
        get-value "" "${TERMUX_ENV__S_ROOT}BAR_APP__TEST" 'ss="BAR_APP__" "TEST" "*"' || return $?
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST

    TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true" TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST="true"
    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "BAR_APP__" "TEST" "bar" || return $?
    get_unset_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "BAR_APP__" "TEST" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_var-to-set_var-already-set_value-unset" \
        "$env_command" \
        "true" "$env_file" \
        81 "^Failed to find a valid value .*$" \
        get-value "" "${TERMUX_ENV__S_ROOT}BAR_APP__TEST" 'ss="BAR_APP__" "TEST" "*"' || return $?
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST



    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_scope_none-with-no-def" \
        "" \
        "false" "" \
        64 "^The scoped_var_scope_mode '' argument for the variable to get passed to \
'termux_core__([a-z_]+)__termux_apps_info_env_variable' is not valid\..*$" \
        get-value "--skip-sourcing" _ '"" "TEST" "?"' || return $?

    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_scope_none-with-def" \
        "" \
        "false" "" \
        64 "^The scoped_var_scope_mode '' argument for the variable to get passed to \
'termux_core__([a-z_]+)__termux_apps_info_env_variable' is not valid\..*$" \
        get-value "--skip-sourcing" _ '"" "TEST" "?" "foo"' || return $?

    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_scope_invalid-with-no-arg" \
        "" \
        "false" "" \
        64 "^The scoped_var_scope_mode 't=' argument for the variable to get passed to \
'termux_core__([a-z_]+)__termux_apps_info_env_variable' is not valid\..*$" \
        get-value "--skip-sourcing" _ 't= "TEST" "*"' || return $?

    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_scope_invalid-with-arg" \
        "" \
        "false" "" \
        64 "^The scoped_var_scope_mode 't=_' argument for the variable to get passed to \
'termux_core__([a-z_]+)__termux_apps_info_env_variable' is not valid\..*$" \
        get-value "--skip-sourcing" _ 't="_" "TEST" "*"' || return $?

    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_component-name_invalid-with-no-arg" \
        "" \
        "false" "" \
        64 "^The scoped_var_scope_mode 'cn=' argument for the variable to get passed to \
'termux_core__([a-z_]+)__termux_apps_info_env_variable' is not valid\..*$" \
        get-value "--skip-sourcing" _ 'cn= "TEST" "*"' || return $?

    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_component-name_unsupported-app" \
        "" \
        "false" "" \
        64 "^The scoped_var_scope_mode 'cn=bar-app' argument for the variable to get passed to \
'termux_core__([a-z_]+)__termux_scoped_env_variable' is not valid\..*$" \
        get-value "--skip-sourcing" _ 'cn="bar-app" "TEST" "*"' || return $?



    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_scope-s_no-arg" \
        "" \
        "false" "" \
        64 "^The scoped_var_scope_mode 's=' argument for the variable to get passed to \
'termux_core__([a-z_]+)__termux_apps_info_env_variable' is not valid\..*$" \
        get-value "--skip-sourcing" _ 's="" "TEST" "*"' || return $?


    get_export_scoped_variable_command env_command "TERMUX_" "ENV__" "S_ROOT" "1" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_scope-s_var-root-scope-invalid" \
        "$env_command" \
        "false" "" \
        81 "^Failed to find a valid value .*$" \
        get-value "--skip-sourcing" _ 's="BAR_APP__" "TEST" "*"' || return $?

    get_export_scoped_variable_command env_command "TERMUX_" "ENV__" "S_ROOT" "BAR_" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_scope-s_var-sub-scope-invalid" \
        "$env_command" \
        "false" "" \
        64 "^The name of the variable to get 'BAR#_APP__TEST' generated in \
'termux_core__([a-z_]+)__termux_scoped_env_variable' is not a valid environment variable name\..*$" \
        get-value "--skip-sourcing" _ 's="BAR#_APP__" "TEST" "*"' || return $?

    get_export_scoped_variable_command env_command "TERMUX_" "ENV__" "S_ROOT" "BAR_" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_scope-s_var-sub-name-invalid" \
        "$env_command" \
        "false" "" \
        64 "^The name of the variable to get 'BAR_APP__#TEST' generated in \
'termux_core__([a-z_]+)__termux_scoped_env_variable' is not a valid environment variable name\..*$" \
        get-value "--skip-sourcing" _ 's="BAR_APP__" "#TEST" "*"' || return $?


    get_export_scoped_variable_command env_command "TERMUX_" "ENV__" "S_ROOT" "BAR_" || return $?
    append_export_scoped_variable_command env_command "BAR_" "APP__" "VAR" "bar" || return $?
    append_export_scoped_variable_command env_command "BAZ_" "APP__" "VAR" "baz" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_scope-s_custom-set" \
        "$env_command" \
        "false" "" \
        0 "^baz$" \
        get-value "--skip-sourcing" _ 's="BAZ_APP__" "VAR" "*"' || return $?



    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_scope-ss_no-arg" \
        "" \
        "false" "" \
        64 "^The scoped_var_scope_mode 'ss=' argument for the variable to get passed to \
'termux_core__([a-z_]+)__termux_apps_info_env_variable' is not valid\..*$" \
        get-value "" _ 'ss="" "TEST" "*"' || return $?


    get_export_scoped_variable_command env_command "TERMUX_" "ENV__" "S_ROOT" "1" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_scope-ss_var-root-scope-invalid" \
        "$env_command" \
        "false" "" \
        1 "^The TERMUX_ENV__S_ROOT environment variable value '1' while running \
'termux_core__([a-z_]+)__termux_scoped_env_variable' is not a valid environment variable name\..*$" \
        get-value "--skip-sourcing" _ 'ss="APP__" "TEST" "*"' || return $?

    get_export_scoped_variable_command env_command "TERMUX_" "ENV__" "S_ROOT" "BAR_" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_scope-ss_var-sub-scope-invalid" \
        "$env_command" \
        "false" "" \
        64 "^The name of the variable to get 'BAR_X#_APP__TEST' generated in \
'termux_core__([a-z_]+)__termux_scoped_env_variable' is not a valid environment variable name\..*$" \
        get-value "--skip-sourcing" _ 'ss="X#_APP__" "TEST" "*"' || return $?

    get_export_scoped_variable_command env_command "TERMUX_" "ENV__" "S_ROOT" "BAR_" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_scope-ss_var-sub-name-invalid" \
        "$env_command" \
        "false" "" \
        64 "^The name of the variable to get 'BAR_APP__#TEST' generated in \
'termux_core__([a-z_]+)__termux_scoped_env_variable' is not a valid environment variable name\..*$" \
        get-value "--skip-sourcing" _ 'ss="APP__" "#TEST" "*"' || return $?


    get_export_scoped_variable_command env_command "TERMUX_" "ENV__" "S_ROOT" "BAR_" || return $?
    append_export_scoped_variable_command env_command "BAR_" "APP__" "VAR" "bar" || return $?
    append_export_scoped_variable_command env_command "BAZ_" "APP__" "VAR" "baz" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_scope-ss_custom-set" \
        "$env_command" \
        "false" "" \
        0 "^bar$" \
        get-value "--skip-sourcing" _ 'ss="APP__" "VAR" "*"' || return $?

    get_export_scoped_variable_command env_command "TERMUX_" "ENV__" "S_ROOT" "BAR_" || return $?
    append_export_scoped_variable_command env_command "BAR_" "APP__" "VAR" "bar" || return $?
    append_export_scoped_variable_command env_command "BAZ_" "APP__" "VAR" "baz" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_scope-ss_custom-unset" \
        "$env_command" \
        "false" "" \
        81 "^Failed to find a valid value .*$" \
        get-value "--skip-sourcing" _ 'ss="FOO_APP__" "VAR" "*"' || return $?



    local -A test_types=()
    test_types["scope-s"]='s="'"${TERMUX_ENV__S_ROOT}APP__"'"'
    test_types["scope-ss"]='ss="'APP__'"'
    test_types["component-name"]='cn="termux-app"'

    for test_type in "${!test_types[@]}"; do
        termux_core__taiavn__scope_args="${test_types["$test_type"]}"

        # `--skip-sourcing`.
        get_unset_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "APP__" "VAR" || return $?
        get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "APP__" "VAR" "baz" || return $?
        "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_${test_type}_skip-sourcing_env-unset" \
            "$env_command" \
            "true" "$env_file" \
            81 "^Failed to find a valid value .*$" \
            get-value "--skip-sourcing" _ "${termux_core__taiavn__scope_args}"' "VAR" "*"' || return $?

        get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "APP__" "VAR" "" || return $?
        get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "APP__" "VAR" "baz" || return $?
        "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_${test_type}_skip-sourcing_env-empty" \
            "$env_command" \
            "true" "$env_file" \
            0 "^$" \
            get-value "--skip-sourcing" _ "${termux_core__taiavn__scope_args}"' "VAR" "*"' || return $?

        get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "APP__" "VAR" "bar" || return $?
        get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "APP__" "VAR" "baz" || return $?
        "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_${test_type}_skip-sourcing_env-set" \
            "$env_command" \
            "true" "$env_file" \
            0 "^bar$" \
            get-value "--skip-sourcing" _ "${termux_core__taiavn__scope_args}"' "VAR" "*"' || return $?



        # `--skip-sourcing-if-cur-app-var`.
        get_export_scoped_variable_command env_command "TERMUX_" "ENV__" "S_APP" "${TERMUX_ENV__S_ROOT}APP__" || return $?
        append_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "APP__" "VAR" "bar" || return $?
        get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "APP__" "VAR" "baz" || return $?
        "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_${test_type}_skip-sourcing-if-cur-app-var_env-set_file-set_same-app" \
            "$env_command" \
            "true" "$env_file" \
            0 "^bar$" \
            get-value "--skip-sourcing-if-cur-app-var" _ "${termux_core__taiavn__scope_args}"' "VAR" "*"' || return $?

        get_export_scoped_variable_command env_command "TERMUX_" "ENV__" "S_APP" "${TERMUX_ENV__S_ROOT}DIFF_APP__" || return $?
        append_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "APP__" "VAR" "bar" || return $?
        get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "APP__" "VAR" "baz" || return $?
        "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_${test_type}_skip-sourcing-if-cur-app-var_env-set_file-set_different-app" \
            "$env_command" \
            "true" "$env_file" \
            0 "^baz$" \
            get-value "--skip-sourcing-if-cur-app-var" _ "${termux_core__taiavn__scope_args}"' "VAR" "*"' || return $?

        get_export_scoped_variable_command env_command "TERMUX_" "ENV__" "S_APP" "${TERMUX_ENV__S_ROOT}DIFF_APP__" || return $?
        append_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "APP__" "VAR" "bar" || return $?
        get_unset_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "APP__" "VAR" || return $?
        "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_${test_type}_skip-sourcing-if-cur-app-var_env-set_file-unset_different-app" \
            "$env_command" \
            "true" "$env_file" \
            81 "^Failed to find a valid value .*$" \
            get-value "--skip-sourcing-if-cur-app-var" _ "${termux_core__taiavn__scope_args}"' "VAR" "*"' || return $?



        # `--source`.
        get_unset_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "APP__" "VAR" || return $?
        get_unset_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "APP__" "VAR" || return $?
        "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_${test_type}_source_env-unset_file-unset" \
            "$env_command" \
            "true" "$env_file" \
            81 "^Failed to find a valid value .*$" \
            get-value "" _ "${termux_core__taiavn__scope_args}"' "VAR" "*"' || return $?

        get_unset_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "APP__" "VAR" || return $?
        get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "APP__" "VAR" "" || return $?
        "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_${test_type}_source_env-unset_file-empty" \
            "$env_command" \
            "true" "$env_file" \
            0 "^$" \
            get-value "" _ "${termux_core__taiavn__scope_args}"' "VAR" "*"' || return $?

        get_unset_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "APP__" "VAR" || return $?
        get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "APP__" "VAR" "baz" || return $?
        "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_${test_type}_source_env-unset_file-set" \
            "$env_command" \
            "true" "$env_file" \
            0 "^baz$" \
            get-value "" _ "${termux_core__taiavn__scope_args}"' "VAR" "*"' || return $?


        get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "APP__" "VAR" "" || return $?
        get_unset_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "APP__" "VAR" || return $?
        "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_${test_type}_source_env-empty_file-unset" \
            "$env_command" \
            "true" "$env_file" \
            81 "^Failed to find a valid value .*$" \
            get-value "" _ "${termux_core__taiavn__scope_args}"' "VAR" "*"' || return $?

        get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "APP__" "VAR" "" || return $?
        get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "APP__" "VAR" "" || return $?
        "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_${test_type}_source_env-empty_file-empty" \
            "$env_command" \
            "true" "$env_file" \
            0 "^$" \
            get-value "" _ "${termux_core__taiavn__scope_args}"' "VAR" "*"' || return $?

        get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "APP__" "VAR" "" || return $?
        get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "APP__" "VAR" "baz" || return $?
        "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_${test_type}_source_env-empty_file-set" \
            "$env_command" \
            "true" "$env_file" \
            0 "^baz$" \
            get-value "" _ "${termux_core__taiavn__scope_args}"' "VAR" "*"' || return $?


        get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "APP__" "VAR" "bar" || return $?
        get_unset_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "APP__" "VAR" || return $?
        "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_${test_type}_source_env-set_file-unset" \
            "$env_command" \
            "true" "$env_file" \
            81 "^Failed to find a valid value .*$" \
            get-value "" _ "${termux_core__taiavn__scope_args}"' "VAR" "*"' || return $?

        get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "APP__" "VAR" "bar" || return $?
        get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "APP__" "VAR" "" || return $?
        "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_${test_type}_source_env-set_file-empty" \
            "$env_command" \
            "true" "$env_file" \
            0 "^$" \
            get-value "" _ "${termux_core__taiavn__scope_args}"' "VAR" "*"' || return $?

        get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "APP__" "VAR" "bar" || return $?
        get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "APP__" "VAR" "baz" || return $?
        "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_${test_type}_source_env-set_file-set" \
            "$env_command" \
            "true" "$env_file" \
            0 "^baz$" \
            get-value "" _ "${termux_core__taiavn__scope_args}"' "VAR" "*"' || return $?
    done



    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_validator-command_invalid-with-no-arg" \
        "" \
        "false" "" \
        64 "^The validator command 'unknown_func' \
not found while running 'termux_core__([a-z_]+)__termux_scoped_env_variable' \
that is set in the ([a-z_]+)_validator 'c\+=unknown_func' argument\..*$" \
        get-value "" _ 'ss="'"$var_sub_scope_name"'" "TEST" c+="unknown_func"' || return $?

    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_validator-command_invalid-with-arg" \
        "" \
        "false" "" \
        64 "^The validator command 'unknown_func' \
not found while running 'termux_core__([a-z_]+)__termux_scoped_env_variable' \
that is set in the ([a-z_]+)_validator 'c\+=unknown_func arg1' argument\..*$" \
        get-value "" _ 'ss="'"$var_sub_scope_name"'" "TEST" c+="unknown_func arg1"' || return $?


    TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true"
    get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "foo" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_validator-command_no-command-arg_file-valid" \
        "${env_command}${NL}${NL}is_valid_scoped_variable() { [ \"\$1\" = \"foo\" ]; }" \
        "true" "$env_file" \
        0 "^foo$" \
        get-value "" _ "ss='$var_sub_scope_name' '$var_sub_name' c+='is_valid_scoped_variable'" || return $?
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST

    TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true"
    get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "bar" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_validator-command_no-command-arg_file-invalid" \
        "${env_command}${NL}${NL}is_valid_scoped_variable() { [ \"\$1\" = \"foo\" ]; }" \
        "true" "$env_file" \
        81 "^Failed to find a valid value .*$" \
        get-value "" _ "ss='$var_sub_scope_name' '$var_sub_name' c+='is_valid_scoped_variable'" || return $?
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST

    TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true"
    get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "bar" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_validator-command_no-command-arg_file-invalid_def-valid" \
        "${env_command}${NL}${NL}is_valid_scoped_variable() { [ \"\$1\" = \"foo\" ]; }" \
        "true" "$env_file" \
        0 "^foo$" \
        get-value "" _ "ss='$var_sub_scope_name' '$var_sub_name' c+='is_valid_scoped_variable' foo" || return $?
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST

    TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true"
    get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "bar" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_validator-command_no-command-arg_file-invalid_def-invalid" \
        "${env_command}${NL}${NL}is_valid_scoped_variable() { [ \"\$1\" = \"foo\" ]; }" \
        "true" "$env_file" \
        81 "^Failed to find a valid value .*$" \
        get-value "" _ "ss='$var_sub_scope_name' '$var_sub_name' c+='is_valid_scoped_variable' baz" || return $?
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST


    TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true"
    get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "foo" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_validator-command_with-command-arg_file-valid" \
        "${env_command}${NL}${NL}is_valid_scoped_variable() { [ \"\$1\" = \"value\" ] && [ \"\$2\" = \"foo\" ]; }" \
        "true" "$env_file" \
        0 "^foo$" \
        get-value "" _ "ss='$var_sub_scope_name' '$var_sub_name' c+='is_valid_scoped_variable value'" || return $?
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST

    TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true"
    get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "bar" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_validator-command_with-command-arg_file-invalid" \
        "${env_command}${NL}${NL}is_valid_scoped_variable() { [ \"\$1\" = \"value\" ] && [ \"\$2\" = \"foo\" ]; }" \
        "true" "$env_file" \
        81 "^Failed to find a valid value .*$" \
        get-value "" _ "ss='$var_sub_scope_name' '$var_sub_name' c+='is_valid_scoped_variable value'" || return $?
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST

    TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true"
    get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "bar" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_validator-command_with-command-arg_file-invalid_def-valid" \
        "${env_command}${NL}${NL}is_valid_scoped_variable() { [ \"\$1\" = \"value\" ] && [ \"\$2\" = \"foo\" ]; }" \
        "true" "$env_file" \
        0 "^foo$" \
        get-value "" _ "ss='$var_sub_scope_name' '$var_sub_name' c+='is_valid_scoped_variable value' foo" || return $?
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST

    TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true"
    get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "bar" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_validator-command_with-command-arg_file-invalid_def-invalid" \
        "${env_command}${NL}${NL}is_valid_scoped_variable() { [ \"\$1\" = \"value\" ] && [ \"\$2\" = \"foo\" ]; }" \
        "true" "$env_file" \
        81 "^Failed to find a valid value .*$" \
        get-value "" _ "ss='$var_sub_scope_name' '$var_sub_name' c+='is_valid_scoped_variable value' baz" || return $?
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST


    TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true"
    get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "bar" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_validator-command_with-command-arg_arg-type-invalid" \
        "${env_command}${NL}${NL}is_valid_scoped_variable() { [ \"\$1\" = \"value\" ] && [ \"\$2\" = \"foo\" ]; }" \
        "true" "$env_file" \
        81 "^Failed to find a valid value .*$" \
        get-value "" _ "ss='$var_sub_scope_name' '$var_sub_name' c+='is_valid_scoped_variable name'" || return $?
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST

    return 0

}



termux_core__termux_apps_info_env_variable__test__termux_string_defined() {

    termux_core__tests__log 4 "${1}()"

    termux_core__tests__validate_argument_count eq $# 5 termux_core__termux_apps_info_env_variable__test__termux_string_defined "$@" || return $?

    local test_label="$1"
    local var_sub_scope_name="$2"
    local var_sub_name="$3"
    local termux_core__taiev__scope_args="$4"
    local termux_core__taiev__validator_and_values_args="$5"

    local env_file

    get_unset_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_file-unset" \
        "" \
        "true" "$env_file" \
        81 "^Failed to find a valid value .*$" \
        get-value "" _ "${termux_core__taiev__scope_args} ${termux_core__taiev__validator_and_values_args}" || return $?

    get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_file-empty" \
        "" \
        "true" "$env_file" \
        0 "^$" \
        get-value "" _ "${termux_core__taiev__scope_args} ${termux_core__taiev__validator_and_values_args}" || return $?

    get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "foo" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_file-set" \
        "" \
        "true" "$env_file" \
        0 "^foo$" \
        get-value "" _ "${termux_core__taiev__scope_args} ${termux_core__taiev__validator_and_values_args}" || return $?

    return 0

}

termux_core__termux_apps_info_env_variable__test__termux_string_set() {

    termux_core__tests__log 4 "${1}()"

    termux_core__tests__validate_argument_count eq $# 5 termux_core__termux_apps_info_env_variable__test__termux_string_set "$@" || return $?

    local test_label="$1"
    local var_sub_scope_name="$2"
    local var_sub_name="$3"
    local termux_core__taiev__scope_args="$4"
    local termux_core__taiev__validator_and_values_args="$5"

    local env_file

    get_unset_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_file-unset" \
        "" \
        "true" "$env_file" \
        81 "^Failed to find a valid value .*$" \
        get-value "" _ "${termux_core__taiev__scope_args} ${termux_core__taiev__validator_and_values_args}" || return $?

    get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_file-empty" \
        "" \
        "true" "$env_file" \
        81 "^Failed to find a valid value .*$" \
        get-value "" _ "${termux_core__taiev__scope_args} ${termux_core__taiev__validator_and_values_args}" || return $?

    get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "foo" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_file-set" \
        "" \
        "true" "$env_file" \
        0 "^foo$" \
        get-value "" _ "${termux_core__taiev__scope_args} ${termux_core__taiev__validator_and_values_args}" || return $?

    return 0

}

termux_core__termux_apps_info_env_variable__test__termux_app__target_sdk() {

    termux_core__tests__log 4 "${1}()"

    termux_core__tests__validate_argument_count eq $# 4 termux_core__termux_apps_info_env_variable__test__termux_app__target_sdk "$@" || return $?

    local test_label="$1"
    local var_sub_scope_name="$2"
    local var_sub_name="$3"
    local termux_core__taiev__scope_args="$4"

    local termux_core__mode__taiev_arg="c+='is_valid_target_sdk'"

    # shellcheck disable=SC2016
    local is_valid_target_sdk_impl='is_valid_target_sdk() { case "${1:-}" in '\'\''|*[!0-9]*|0[0-9]*) return 1;; esac; [ "$1" -le 10000 ]; }'

    local env_file

    TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true"

    get_unset_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_file-unset" \
        "${is_valid_target_sdk_impl}" \
        "true" "$env_file" \
        81 "^Failed to find a valid value .*$" \
        get-value "" _ "${termux_core__taiev__scope_args} ${termux_core__mode__taiev_arg}" || return $?

    get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_file-empty" \
        "${is_valid_target_sdk_impl}" \
        "true" "$env_file" \
        81 "^Failed to find a valid value .*$" \
        get-value "" _ "${termux_core__taiev__scope_args} ${termux_core__mode__taiev_arg}" || return $?

    get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "0" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_file-valid_0" \
        "${is_valid_target_sdk_impl}" \
        "true" "$env_file" \
        0 "^0$" \
        get-value "" _ "${termux_core__taiev__scope_args} ${termux_core__mode__taiev_arg}" || return $?

    get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "1" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_file-valid_1" \
        "${is_valid_target_sdk_impl}" \
        "true" "$env_file" \
        0 "^1$" \
        get-value "" _ "${termux_core__taiev__scope_args} ${termux_core__mode__taiev_arg}" || return $?

    get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "9" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_file-valid_9" \
        "${is_valid_target_sdk_impl}" \
        "true" "$env_file" \
        0 "^9$" \
        get-value "" _ "${termux_core__taiev__scope_args} ${termux_core__mode__taiev_arg}" || return $?

    get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "10" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_file-valid_10" \
        "${is_valid_target_sdk_impl}" \
        "true" "$env_file" \
        0 "^10$" \
        get-value "" _ "${termux_core__taiev__scope_args} ${termux_core__mode__taiev_arg}" || return $?

    get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "11" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_file-valid_11" \
        "${is_valid_target_sdk_impl}" \
        "true" "$env_file" \
        0 "^11$" \
        get-value "" _ "${termux_core__taiev__scope_args} ${termux_core__mode__taiev_arg}" || return $?

    get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "99" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_file-valid_99" \
        "${is_valid_target_sdk_impl}" \
        "true" "$env_file" \
        0 "^99$" \
        get-value "" _ "${termux_core__taiev__scope_args} ${termux_core__mode__taiev_arg}" || return $?

    get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "999" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_file-valid_999" \
        "${is_valid_target_sdk_impl}" \
        "true" "$env_file" \
        0 "^999$" \
        get-value "" _ "${termux_core__taiev__scope_args} ${termux_core__mode__taiev_arg}" || return $?

    get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "1000" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_file-valid_1000" \
        "${is_valid_target_sdk_impl}" \
        "true" "$env_file" \
        0 "^1000$" \
        get-value "" _ "${termux_core__taiev__scope_args} ${termux_core__mode__taiev_arg}" || return $?

    get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "9999" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_file-valid_9999" \
        "${is_valid_target_sdk_impl}" \
        "true" "$env_file" \
        0 "^9999$" \
        get-value "" _ "${termux_core__taiev__scope_args} ${termux_core__mode__taiev_arg}" || return $?

    get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "10000" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_file-valid_10000" \
        "${is_valid_target_sdk_impl}" \
        "true" "$env_file" \
        0 "^10000$" \
        get-value "" _ "${termux_core__taiev__scope_args} ${termux_core__mode__taiev_arg}" || return $?

    get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "-0" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_file-invalid_-0" \
        "${is_valid_target_sdk_impl}" \
        "true" "$env_file" \
        81 "^Failed to find a valid value .*$" \
        get-value "" _ "${termux_core__taiev__scope_args} ${termux_core__mode__taiev_arg}" || return $?

    get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "01" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_file-invalid_01" \
        "${is_valid_target_sdk_impl}" \
        "true" "$env_file" \
        81 "^Failed to find a valid value .*$" \
        get-value "" _ "${termux_core__taiev__scope_args} ${termux_core__mode__taiev_arg}" || return $?

    get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "100000" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_file-invalid_100000" \
        "${is_valid_target_sdk_impl}" \
        "true" "$env_file" \
        81 "^Failed to find a valid value .*$" \
        get-value "" _ "${termux_core__taiev__scope_args} ${termux_core__mode__taiev_arg}" || return $?

    get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "1000000" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_file-invalid_1000000" \
        "${is_valid_target_sdk_impl}" \
        "true" "$env_file" \
        81 "^Failed to find a valid value .*$" \
        get-value "" _ "${termux_core__taiev__scope_args} ${termux_core__mode__taiev_arg}" || return $?

    get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "uuu" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_file-invalid_uuu" \
        "${is_valid_target_sdk_impl}" \
        "true" "$env_file" \
        81 "^Failed to find a valid value .*$" \
        get-value "" _ "${termux_core__taiev__scope_args} ${termux_core__mode__taiev_arg}" || return $?

    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST

    return 0

}

termux_core__termux_apps_info_env_variable__test__termux_app__data_dir() {

    termux_core__tests__log 4 "${1}()"

    termux_core__tests__validate_argument_count eq $# 6 termux_core__termux_apps_info_env_variable__test__termux_app__data_dir "$@" || return $?

    local test_label="$1"
    local var_sub_scope_name="$2"
    local var_sub_name="$3"
    local termux_core__taiev__scope_args="$4"
    local termux_core__taiev__validator_and_values_args="$5"
    local termux_app__data_dir="$6"

    local env_file
    local termux_app__data_dir_escaped

    termux_app__data_dir_escaped="$(termux_core__tests__escape_string_for_regex "$termux_app__data_dir")" || return $?

    get_unset_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_file-unset" \
        "" \
        "true" "$env_file" \
        81 "^Failed to find a valid value .*$" \
        get-value "" _ "${termux_core__taiev__scope_args} ${termux_core__taiev__validator_and_values_args}" || return $?

    get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_file-empty" \
        "" \
        "true" "$env_file" \
        81 "^Failed to find a valid value .*$" \
        get-value "" _ "${termux_core__taiev__scope_args} ${termux_core__taiev__validator_and_values_args}" || return $?

    get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" "$termux_app__data_dir" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_file-valid-path" \
        "" \
        "true" "$env_file" \
        0 "^${termux_app__data_dir_escaped}$" \
        get-value "" _ "${termux_core__taiev__scope_args} ${termux_core__taiev__validator_and_values_args}" || return $?

    get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "$var_sub_name" ".$termux_app__data_dir" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_file-invalid-path" \
        "" \
        "true" "$env_file" \
        81 "^Failed to find a valid value .*$" \
        get-value "" _ "${termux_core__taiev__scope_args} ${termux_core__taiev__validator_and_values_args}" || return $?

    return 0

}





termux_core__termux_apps_info_app_version_name__run_tests() {

    termux_core__tests__log 3 "termux_core__termux_apps_info_app_version_name()"

    termux_core__sh__termux_apps_info_app_version_name__run_tests || return $?
    termux_core__bash__termux_apps_info_app_version_name__run_tests || return $?

    return 0

}



termux_core__sh__termux_apps_info_app_version_name__run_tests() {

    termux_core__tests__log 3 "termux_core__sh__termux_apps_info_app_version_name()"

    TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME="termux_core__sh__termux_apps_info_app_version_name__run_test"
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_VAR_TEST

    termux_core__set_termux_core_test_scoped_env_variables__default || return $?
    termux_core__sh__termux_apps_info_app_version_name__run_tests_for_scope || return $?

    termux_core__set_termux_core_test_scoped_env_variables__foo || return $?
    termux_core__sh__termux_apps_info_app_version_name__run_tests_for_scope || return $?

    return 0

}

termux_core__sh__termux_apps_info_app_version_name__run_tests_for_scope() {

    TERMUX_ENV__S_ROOT="$TERMUX_CORE__TESTS__TERMUX_ENV__S_ROOT"


    termux_core__termux_apps_info_app_version_name__test__usage "usage" \
        "APP__" "STRING" || return $?



    # `TERMUX_APP__APP_VERSION_NAME`.
    termux_core__termux_apps_info_app_version_name__test__app_version_name "termux-app_app-version-name" \
        "APP__" "termux-app" "--posix-validator=\"p+=''|termux-[0-9]*\"" || return $?



    # `TERMUX_API_APP__APP_VERSION_NAME`.
    termux_core__termux_apps_info_app_version_name__test__app_version_name "termux-api-app_app-version-name" \
        "API_APP__" "termux-api-app" "--posix-validator=\"p+=''|termux-[0-9]*\"" || return $?



    # `TERMUX_FLOAT_APP__APP_VERSION_NAME`.
    termux_core__termux_apps_info_app_version_name__test__app_version_name "termux-float-app_app-version-name" \
        "FLOAT_APP__" "termux-float-app" "--posix-validator=\"p+=''|termux-[0-9]*\"" || return $?



    # `TERMUX_GUI_APP__APP_VERSION_NAME`.
    termux_core__termux_apps_info_app_version_name__test__app_version_name "termux-gui-app_app-version-name" \
        "GUI_APP__" "termux-gui-app" "--posix-validator=\"p+=''|termux-[0-9]*\"" || return $?



    # `TERMUX_TASKER_APP__APP_VERSION_NAME`.
    termux_core__termux_apps_info_app_version_name__test__app_version_name "termux-tasker-app_app-version-name" \
        "TASKER_APP__" "termux-tasker-app" "--posix-validator=\"p+=''|termux-[0-9]*\"" || return $?



    # `TERMUX_WIDGET_APP__APP_VERSION_NAME`.
    termux_core__termux_apps_info_app_version_name__test__app_version_name "termux-widget-app_app-version-name" \
        "WIDGET_APP__" "termux-widget-app" "--posix-validator=\"p+=''|termux-[0-9]*\"" || return $?



    # `TERMUX_X11_APP__APP_VERSION_NAME`.
    termux_core__termux_apps_info_app_version_name__test__app_version_name "termux-x11-app_app-version-name" \
        "X11_APP__" "termux-x11-app" "--posix-validator=\"p+=''|termux-[0-9]*\"" || return $?

    return 0

}

termux_core__sh__termux_apps_info_app_version_name__run_test() {

    termux_core__tests__validate_argument_count ge $# 7 termux_core__sh__termux_apps_info_app_version_name__run_test "$@" || return $?

    local test_name="$1"
    local pre_test_commands="$2"
    local termux_apps_info_env_file_export="$3"
    local termux_apps_info_env_file_content="$4"
    local expected_exit_code="$5"
    local expected_output_regex="$6"
    local termux_core__sh__taiavn_command_type="$7"

    local termux_apps_info_env_file_create_command
    local termux_apps_info_env_file_export_command
    local termux_apps_info_env_file_path
    local termux_core__sh__taiavn_call_command
    local termux_core__sh__taiavn_source_command
    local termux_core__sh__taiavn_source_output_mode_arg=""
    local termux_core__sh__taiavn_source_print_command=""

    if [[ "$termux_core__sh__taiavn_command_type" == "get-value" ]]; then
        termux_core__tests__validate_argument_count eq $# 10 \
            "'termux_core__sh__termux_apps_info_app_version_name__run_test' for the '$termux_core__sh__taiavn_command_type' command" "$@" || return $?

        local termux_core__sh__taiavn_options="$8"
        local termux_core__sh__taiavn_source_output_mode="$9"
        local termux_core__sh__taiavn_args="${10}"

        if [[ "$termux_core__sh__taiavn_source_output_mode" == "_" ]]; then
            termux_core__sh__taiavn_source_output_mode="output_variable"
        fi

        termux_core__sh__taiavn_source_output_mode_arg=" '$termux_core__sh__taiavn_source_output_mode'"

        if [[ "$termux_core__sh__taiavn_source_output_mode" != "-" ]] && \
                [[ "$termux_core__sh__taiavn_source_output_mode" != ">" ]]; then
            termux_core__sh__taiavn_source_print_command="${NL}printf '%s' \"\${$termux_core__sh__taiavn_source_output_mode:-}\""
        fi
    elif [[ "$termux_core__sh__taiavn_command_type" == "unset-value" ]]; then
        termux_core__tests__validate_argument_count eq $# 10 \
            "'termux_core__sh__termux_apps_info_app_version_name__run_test' for the '$termux_core__sh__taiavn_command_type' command" "$@" || return $?

        local termux_core__sh__taiavn_options="$8"
        local termux_core__sh__taiavn_source_print_var="$9"
        local termux_core__sh__taiavn_args="${10}"

        if [[ "$termux_core__sh__taiavn_source_print_var" != "-" ]]; then
            termux_core__sh__taiavn_source_print_command="${NL}printf '%s' \"\${$termux_core__sh__taiavn_source_print_var:-}\""
        fi
    fi


    # shellcheck disable=SC2016
    termux_core__sh__taiavn_source_command='source_file_from_path() { local source_file="${1:-}"; [ $# -gt 0 ] && shift 1; local source_path; if source_path="$(command -v "$source_file")" && [ -n "$source_path" ]; then . "$source_path" || return $?; else echo "Failed to find the '\''$source_file'\'' file to source." 1>&2; return 1; fi; }'"${NL}${NL}"'
source_file_from_path "termux-apps-info-app-version-name.sh" --sourcing-script || exit $?'

    termux_apps_info_env_file_path="$TERMUX_CORE__TESTS__TMPDIR_PATH/termux-apps-info.env"
    if [[ "$termux_apps_info_env_file_export" == "true" ]]; then
        termux_apps_info_env_file_create_command="printf '%s\n' '${termux_apps_info_env_file_content//\'/\'\\\'\'}' > '${termux_apps_info_env_file_path//\'/\'\\\'\'}'"
        get_export_scoped_variable_command termux_apps_info_env_file_export_command "$TERMUX_ENV__S_ROOT" "CORE__" "APPS_INFO_ENV_FILE" "$termux_apps_info_env_file_path" || return $?
    else
        termux_apps_info_env_file_create_command="printf '%s' '' > '${termux_apps_info_env_file_path//\'/\'\\\'\'}'"
        get_unset_scoped_variable_command termux_apps_info_env_file_export_command "$TERMUX_ENV__S_ROOT" "CORE__" "APPS_INFO_ENV_FILE" || return $?
    fi

    pre_test_commands="export TERMUX_ENV__S_ROOT='${TERMUX_ENV__S_ROOT//\'/\'\\\'\'}';${NL}
unset TERMUX_ENV__S_APP;${NL}${NL}\
${termux_apps_info_env_file_create_command}${NL}${NL}${termux_apps_info_env_file_export_command}${NL}${NL}\
${pre_test_commands:+"$pre_test_commands${NL}${NL}"}"

    termux_core__sh__taiavn_options="${termux_core__sh__taiavn_options:+"$termux_core__sh__taiavn_options "}"

    if [[ "$termux_core__sh__taiavn_command_type" == "get-value" ]]; then
        if [[ "$TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST" != "true" ]]; then
            termux_core__sh__taiavn_call_command="termux-apps-info-app-version-name.sh"
            termux_core__tests__run_script_test "termux_core__sh__taiavn__${test_name}__exec-stdout" \
                "#!/bin/sh${NL}${NL}set -e -u${NL}${NL}${pre_test_commands}$termux_core__sh__taiavn_call_command '$termux_core__sh__taiavn_command_type' ${termux_core__sh__taiavn_options}'>' $termux_core__sh__taiavn_args" \
                "$expected_exit_code" "$expected_output_regex" || return $?
        fi

        if [[ "$TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST" != "true" ]]; then
            termux_core__sh__taiavn_call_command="${termux_core__sh__taiavn_source_command}${NL}${NL}termux_core__sh__termux_apps_info_app_version_name"
            termux_core__tests__run_script_test "termux_core__sh__taiavn__${test_name}__source-stdout" \
                "#!/bin/sh${NL}${NL}set -e -u${NL}${NL}${pre_test_commands}$termux_core__sh__taiavn_call_command '$termux_core__sh__taiavn_command_type' ${termux_core__sh__taiavn_options}'>' $termux_core__sh__taiavn_args" \
                "$expected_exit_code" "$expected_output_regex" || return $?
        fi
    fi

    if [[ "$TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_VAR_TEST" != "true" ]]; then
        termux_core__sh__taiavn_call_command="${termux_core__sh__taiavn_source_command}${NL}${NL}termux_core__sh__termux_apps_info_app_version_name"
        termux_core__tests__run_script_test "termux_core__sh__taiavn__${test_name}__source-var" \
            "#!/bin/sh${NL}${NL}set -e -u${NL}${NL}${pre_test_commands}$termux_core__sh__taiavn_call_command '$termux_core__sh__taiavn_command_type' ${termux_core__sh__taiavn_options}$termux_core__sh__taiavn_source_output_mode_arg $termux_core__sh__taiavn_args || exit \$?$termux_core__sh__taiavn_source_print_command" \
            "$expected_exit_code" "$expected_output_regex" || return $?
    fi

    return 0

}



termux_core__bash__termux_apps_info_app_version_name__run_tests() {

    termux_core__tests__log 3 "termux_core__bash__termux_apps_info_app_version_name()"

    TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME="termux_core__bash__termux_apps_info_app_version_name__run_test"
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_VAR_TEST

    termux_core__set_termux_core_test_scoped_env_variables__default || return $?
    termux_core__bash__termux_apps_info_app_version_name__run_tests_for_scope || return $?

    termux_core__set_termux_core_test_scoped_env_variables__foo || return $?
    termux_core__bash__termux_apps_info_app_version_name__run_tests_for_scope || return $?

    return 0

}

termux_core__bash__termux_apps_info_app_version_name__run_tests_for_scope() {

    TERMUX_ENV__S_ROOT="$TERMUX_CORE__TESTS__TERMUX_ENV__S_ROOT"


    termux_core__termux_apps_info_app_version_name__test__usage "usage" \
        "APP__" "STRING" || return $?



    # `TERMUX_APP__APP_VERSION_NAME`.
    termux_core__termux_apps_info_app_version_name__test__app_version_name "termux-app_app-version-name" \
        "APP__" "termux-app" "--extended-validator=\"r+=^(()|(termux-[0-9].*))$\"" || return $?



    # `TERMUX_API_APP__APP_VERSION_NAME`.
    termux_core__termux_apps_info_app_version_name__test__app_version_name "termux-api-app_app-version-name" \
        "API_APP__" "termux-api-app" "--extended-validator=\"r+=^(()|(termux-[0-9].*))$\"" || return $?



    # `TERMUX_FLOAT_APP__APP_VERSION_NAME`.
    termux_core__termux_apps_info_app_version_name__test__app_version_name "termux-float-app_app-version-name" \
        "FLOAT_APP__" "termux-float-app" "--extended-validator=\"r+=^(()|(termux-[0-9].*))$\"" || return $?



    # `TERMUX_GUI_APP__APP_VERSION_NAME`.
    termux_core__termux_apps_info_app_version_name__test__app_version_name "termux-gui-app_app-version-name" \
        "GUI_APP__" "termux-gui-app" "--extended-validator=\"r+=^(()|(termux-[0-9].*))$\"" || return $?



    # `TERMUX_TASKER_APP__APP_VERSION_NAME`.
    termux_core__termux_apps_info_app_version_name__test__app_version_name "termux-tasker-app_app-version-name" \
        "TASKER_APP__" "termux-tasker-app" "--extended-validator=\"r+=^(()|(termux-[0-9].*))$\"" || return $?



    # `TERMUX_WIDGET_APP__APP_VERSION_NAME`.
    termux_core__termux_apps_info_app_version_name__test__app_version_name "termux-widget-app_app-version-name" \
        "WIDGET_APP__" "termux-widget-app" "--extended-validator=\"r+=^(()|(termux-[0-9].*))$\"" || return $?



    # `TERMUX_X11_APP__APP_VERSION_NAME`.
    termux_core__termux_apps_info_app_version_name__test__app_version_name "termux-x11-app_app-version-name" \
        "X11_APP__" "termux-x11-app" "--extended-validator=\"r+=^(()|(termux-[0-9].*))$\"" || return $?

    return 0

}

termux_core__bash__termux_apps_info_app_version_name__run_test() {

    termux_core__tests__validate_argument_count ge $# 7 termux_core__bash__termux_apps_info_app_version_name__run_test "$@" || return $?

    local test_name="$1"
    local pre_test_commands="$2"
    local termux_apps_info_env_file_export="$3"
    local termux_apps_info_env_file_content="$4"
    local expected_exit_code="$5"
    local expected_output_regex="$6"
    local termux_core__bash__taiavn_command_type="$7"

    local termux_apps_info_env_file_create_command
    local termux_apps_info_env_file_export_command
    local termux_apps_info_env_file_path
    local termux_core__bash__taiavn_call_command
    local termux_core__bash__taiavn_source_command
    local termux_core__bash__taiavn_source_output_mode_arg=""
    local termux_core__bash__taiavn_source_print_command=""

    if [[ "$termux_core__bash__taiavn_command_type" == "get-value" ]]; then
        termux_core__tests__validate_argument_count eq $# 10 \
            "'termux_core__bash__termux_apps_info_app_version_name__run_test' for the '$termux_core__bash__taiavn_command_type' command" "$@" || return $?

        local termux_core__bash__taiavn_options="$8"
        local termux_core__bash__taiavn_source_output_mode="$9"
        local termux_core__bash__taiavn_args="${10}"

        if [[ "$termux_core__bash__taiavn_source_output_mode" == "_" ]]; then
            termux_core__bash__taiavn_source_output_mode="output_variable"
        fi

        termux_core__bash__taiavn_source_output_mode_arg=" '$termux_core__bash__taiavn_source_output_mode'"

        if [[ "$termux_core__bash__taiavn_source_output_mode" != "-" ]] && \
                [[ "$termux_core__bash__taiavn_source_output_mode" != ">" ]]; then
            termux_core__bash__taiavn_source_print_command="${NL}printf '%s' \"\${$termux_core__bash__taiavn_source_output_mode:-}\""
        fi
    elif [[ "$termux_core__bash__taiavn_command_type" == "unset-value" ]]; then
        termux_core__tests__validate_argument_count eq $# 10 \
            "'termux_core__bash__termux_apps_info_app_version_name__run_test' for the '$termux_core__bash__taiavn_command_type' command" "$@" || return $?

        local termux_core__bash__taiavn_options="$8"
        local termux_core__bash__taiavn_source_print_var="$9"
        local termux_core__bash__taiavn_args="${10}"

        if [[ "$termux_core__bash__taiavn_source_print_var" != "-" ]]; then
            termux_core__bash__taiavn_source_print_command="${NL}printf '%s' \"\${$termux_core__bash__taiavn_source_print_var:-}\""
        fi
    fi


    # shellcheck disable=SC2016
    termux_core__bash__taiavn_source_command='source_file_from_path() { local source_file="${1:-}"; [ $# -gt 0 ] && shift 1; local source_path; if source_path="$(command -v "$source_file")" && [ -n "$source_path" ]; then source "$source_path" || return $?; else echo "Failed to find the '\''$source_file'\'' file to source." 1>&2; return 1; fi; }'"${NL}${NL}"'
source_file_from_path "termux-apps-info-app-version-name.bash" || exit $?'

    termux_apps_info_env_file_path="$TERMUX_CORE__TESTS__TMPDIR_PATH/termux-apps-info.env"
    if [[ "$termux_apps_info_env_file_export" == "true" ]]; then
        termux_apps_info_env_file_create_command="printf '%s\n' '${termux_apps_info_env_file_content//\'/\'\\\'\'}' > '${termux_apps_info_env_file_path//\'/\'\\\'\'}'"
        get_export_scoped_variable_command termux_apps_info_env_file_export_command "$TERMUX_ENV__S_ROOT" "CORE__" "APPS_INFO_ENV_FILE" "$termux_apps_info_env_file_path" || return $?
    else
        termux_apps_info_env_file_create_command="printf '%s' '' > '${termux_apps_info_env_file_path//\'/\'\\\'\'}'"
        get_unset_scoped_variable_command termux_apps_info_env_file_export_command "$TERMUX_ENV__S_ROOT" "CORE__" "APPS_INFO_ENV_FILE" || return $?
    fi

    pre_test_commands="export TERMUX_ENV__S_ROOT='${TERMUX_ENV__S_ROOT//\'/\'\\\'\'}';${NL}
unset TERMUX_ENV__S_APP;${NL}${NL}\
${termux_apps_info_env_file_create_command}${NL}${NL}${termux_apps_info_env_file_export_command}${NL}${NL}\
${pre_test_commands:+"$pre_test_commands${NL}${NL}"}"

    termux_core__bash__taiavn_options="${termux_core__bash__taiavn_options:+"$termux_core__bash__taiavn_options "}"

    if [[ "$termux_core__bash__taiavn_command_type" == "get-value" ]]; then
        if [[ "$TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST" != "true" ]]; then
            termux_core__bash__taiavn_call_command="termux-apps-info-app-version-name.bash"
            termux_core__tests__run_script_test "termux_core__bash__taiavn__${test_name}__exec-stdout" \
                "#!/bin/bash${NL}${NL}set -e -u${NL}${NL}${pre_test_commands}$termux_core__bash__taiavn_call_command '$termux_core__bash__taiavn_command_type' ${termux_core__bash__taiavn_options}'>' $termux_core__bash__taiavn_args" \
                "$expected_exit_code" "$expected_output_regex" || return $?
        fi

        if [[ "$TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST" != "true" ]]; then
            termux_core__bash__taiavn_call_command="${termux_core__bash__taiavn_source_command}${NL}${NL}termux_core__bash__termux_apps_info_app_version_name"
            termux_core__tests__run_script_test "termux_core__bash__taiavn__${test_name}__source-stdout" \
                "#!/bin/bash${NL}${NL}set -e -u${NL}${NL}${pre_test_commands}$termux_core__bash__taiavn_call_command '$termux_core__bash__taiavn_command_type' ${termux_core__bash__taiavn_options}'>' $termux_core__bash__taiavn_args" \
                "$expected_exit_code" "$expected_output_regex" || return $?
        fi
    fi

    if [[ "$TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_VAR_TEST" != "true" ]]; then
        termux_core__bash__taiavn_call_command="${termux_core__bash__taiavn_source_command}${NL}${NL}termux_core__bash__termux_apps_info_app_version_name"
        termux_core__tests__run_script_test "termux_core__bash__taiavn__${test_name}__source-var" \
            "#!/bin/bash${NL}${NL}set -e -u${NL}${NL}${pre_test_commands}$termux_core__bash__taiavn_call_command '$termux_core__bash__taiavn_command_type' ${termux_core__bash__taiavn_options}$termux_core__bash__taiavn_source_output_mode_arg $termux_core__bash__taiavn_args || exit \$?$termux_core__bash__taiavn_source_print_command" \
            "$expected_exit_code" "$expected_output_regex" || return $?
    fi

    return 0

}



termux_core__termux_apps_info_app_version_name__test__usage() {

    termux_core__tests__log 4 "${1}()"

    termux_core__tests__validate_argument_count eq $# 3 termux_core__termux_apps_info_app_version_name__test__usage "$@" || return $?

    local test_label="$1"
    local var_sub_scope_name="$2"
    local var_sub_name="$3"

    local env_command
    local env_file

    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_command_unset" \
        "" \
        "false" "" \
        64 "^The command '' passed to \
'termux_core__([a-z_]+)__termux_apps_info_app_version_name' is not valid\..*$" \
        "" "" - "" || return $?

    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_command_invalid" \
        "" \
        "false" "" \
        64 "^The command 'get-value1' passed to \
'termux_core__([a-z_]+)__termux_apps_info_app_version_name' is not valid\..*$" \
        get-value1 "" - "" || return $?



    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_command_args_invalid-less" \
        "" \
        "false" "" \
        64 "^Invalid argument count 1 for the 'get-value' command\. The \
'termux_core__([a-z_]+)__termux_apps_info_app_version_name' function expects 2 arguments\..*$" \
        get-value "" - "" || return $?



    TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true" TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST="true"
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_var-to-set_none" \
        "" \
        "false" "" \
        64 "^The output_mode '' argument passed to \
'termux_core__([a-z_]+)__termux_apps_info_app_version_name' is not a valid environment variable name, or equal to \`>\` or \`-\`\..*$" \
        get-value "" "" 'ss="APP__"' || return $?
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST

    TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true" TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST="true"
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_var-to-set_invalid" \
        "" \
        "false" "" \
        64 "^The output_mode '1foo' argument passed to \
'termux_core__([a-z_]+)__termux_apps_info_app_version_name' is not a valid environment variable name, or equal to \`>\` or \`-\`\..*$" \
        get-value "" "1foo" 'ss="APP__"' || return $?
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST


    TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true" TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST="true"
    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "APP__" "APP_VERSION_NAME" "0.1.0" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_var-to-set_output-mode-stdout_value-valid" \
        "$env_command" \
        "false" "" \
        0 "^0.\1\.0$" \
        get-value "--skip-sourcing" ">" 'ss="APP__"' || return $?
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST

    TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true" TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST="true"
    get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "APP__" "APP_VERSION_NAME" "0.1.0" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_var-to-set_output-mode-dash_value-valid" \
        "$env_command" \
        "false" "" \
        0 "^$" \
        get-value "--skip-sourcing" "-" 'ss="APP__"' || return $?
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST


    TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true" TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST="true"
    get_export_scoped_variable_command env_command "TERMUX_" "ENV__" "S_APP" "${TERMUX_ENV__S_ROOT}DIFF_APP__" || return $?
    append_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "BAR_APP__" "APP_VERSION_NAME" "0.2.0" || return $?
    get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "BAR_APP__" "APP_VERSION_NAME" "0.1.0" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_var-to-set_var-already-set_value-set" \
        "$env_command" \
        "true" "$env_file" \
        0 "^0.\1\.0$" \
        get-value "" "${TERMUX_ENV__S_ROOT}BAR_APP__APP_VERSION_NAME" 'ss="BAR_APP__"' || return $?
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST

    TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true" TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST="true"
    get_export_scoped_variable_command env_command "TERMUX_" "ENV__" "S_APP" "${TERMUX_ENV__S_ROOT}DIFF_APP__" || return $?
    append_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "BAR_APP__" "APP_VERSION_NAME" "0.2.0" || return $?
    get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "BAR_APP__" "APP_VERSION_NAME" "" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_var-to-set_var-already-set_value-empty" \
        "$env_command" \
        "true" "$env_file" \
        0 "^$" \
        get-value "" "${TERMUX_ENV__S_ROOT}BAR_APP__APP_VERSION_NAME" 'ss="BAR_APP__"' || return $?
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST

    TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST="true" TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST="true"
    get_export_scoped_variable_command env_command "TERMUX_" "ENV__" "S_APP" "${TERMUX_ENV__S_ROOT}DIFF_APP__" || return $?
    append_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "BAR_APP__" "APP_VERSION_NAME" "0.2.0" || return $?
    get_unset_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "BAR_APP__" "APP_VERSION_NAME" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_var-to-set_var-already-set_value-unset" \
        "$env_command" \
        "true" "$env_file" \
        0 "^$" \
        get-value "" "${TERMUX_ENV__S_ROOT}BAR_APP__APP_VERSION_NAME" 'ss="BAR_APP__"' || return $?
    unset TERMUX_CORE__TESTS__TEST_FUNC__SKIP_EXEC_TEST TERMUX_CORE__TESTS__TEST_FUNC__SKIP_SOURCE_STDOUT_TEST



    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_scope_none" \
        "" \
        "false" "" \
        64 "^The scoped_var_scope_mode '' argument for the variable to get passed to \
'termux_core__([a-z_]+)__termux_apps_info_env_variable' is not valid\..*$" \
        get-value "" _ '""' || return $?

    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_scope_invalid-with-no-arg" \
        "" \
        "false" "" \
        64 "^The scoped_var_scope_mode 't=' argument for the variable to get passed to \
'termux_core__([a-z_]+)__termux_apps_info_env_variable' is not valid\..*$" \
        get-value "" _ 't=' || return $?

    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_scope_invalid-with-arg" \
        "" \
        "false" "" \
        64 "^The scoped_var_scope_mode 't=_' argument for the variable to get passed to \
'termux_core__([a-z_]+)__termux_apps_info_env_variable' is not valid\..*$" \
        get-value "" _ 't="_"' || return $?

    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_component-name_invalid-with-no-arg" \
        "" \
        "false" "" \
        64 "^The scoped_var_scope_mode 'cn=' argument for the variable to get passed to \
'termux_core__([a-z_]+)__termux_apps_info_env_variable' is not valid\..*$" \
        get-value "" _ 'cn=' || return $?

    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_component-name_invalid-with-arg" \
        "" \
        "false" "" \
        64 "^The scoped_var_scope_mode 'cn=foo' argument for the variable to get passed to \
'termux_core__([a-z_]+)__termux_apps_info_env_variable' is not valid\..*$" \
        get-value "" _ 'cn="foo"' || return $?



    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_scope-s_no-arg" \
        "" \
        "false" "" \
        64 "^The scoped_var_scope_mode 's=' argument for the variable to get passed to \
'termux_core__([a-z_]+)__termux_apps_info_env_variable' is not valid\..*$" \
        get-value "" _ 's=""' || return $?


    get_export_scoped_variable_command env_command "TERMUX_" "ENV__" "S_ROOT" "1" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_scope-s_var-root-scope-invalid" \
        "$env_command" \
        "false" "" \
        0 "^$" \
        get-value "--skip-sourcing" _ 's="BAR_APP__"' || return $?

    get_export_scoped_variable_command env_command "TERMUX_" "ENV__" "S_ROOT" "BAR_" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_scope-s_var-sub-scope-invalid" \
        "$env_command" \
        "false" "" \
        64 "^The name of the variable to unset 'BAR#_APP__APP_VERSION_NAME' generated in \
'termux_core__([a-z_]+)__termux_scoped_env_variable' is not a valid environment variable name\..*$" \
        get-value "" _ 's="BAR#_APP__"' || return $?



    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_scope-ss_no-arg" \
        "" \
        "false" "" \
        64 "^The scoped_var_scope_mode 'ss=' argument for the variable to get passed to \
'termux_core__([a-z_]+)__termux_apps_info_env_variable' is not valid\..*$" \
        get-value "" _ 'ss=""' || return $?


    get_export_scoped_variable_command env_command "TERMUX_" "ENV__" "S_ROOT" "1" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_scope-ss_var-root-scope-invalid" \
        "$env_command" \
        "false" "" \
        1 "^The TERMUX_ENV__S_ROOT environment variable value '1' while running \
'termux_core__([a-z_]+)__termux_scoped_env_variable' is not a valid environment variable name\..*$" \
        get-value "" _ 'ss="APP__"' || return $?

    get_export_scoped_variable_command env_command "TERMUX_" "ENV__" "S_ROOT" "BAR_" || return $?
    "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_scope-ss_var-sub-scope-invalid" \
        "$env_command" \
        "false" "" \
        64 "^The name of the variable to unset 'BAR_X#_APP__APP_VERSION_NAME' generated in \
'termux_core__([a-z_]+)__termux_scoped_env_variable' is not a valid environment variable name\..*$" \
        get-value "" _ 'ss="X#_APP__"' || return $?

    return 0

}



termux_core__termux_apps_info_app_version_name__test__app_version_name() {

    termux_core__tests__log 4 "${1}()"

    termux_core__tests__validate_argument_count eq $# 4 termux_core__termux_apps_info_app_version_name__test__app_version_name "$@" || return $?

    local test_label="$1"
    local var_sub_scope_name="$2"
    local scoped_var_scope_mode="$3"
    local termux_core__validator__taiavn_args="$4"

    local env_command
    local env_file
    local is_termux_app_scope
    local test_type
    local termux_core__taiavn__scope_args
    local termux_version_env_command
    local unset_termux_version_env_command="unset TERMUX_ENV__S_ROOT;"

    local -A test_types=()
    test_types["scope-s"]='s="'"${TERMUX_ENV__S_ROOT}${var_sub_scope_name}"'"'
    test_types["scope-ss"]='ss="'"${var_sub_scope_name}"'"'
    test_types["component-name"]='cn="'"${scoped_var_scope_mode}"'"'

    for test_type in "${!test_types[@]}"; do
        termux_core__taiavn__scope_args="${test_types["$test_type"]}"

        if [[ "$termux_core__taiavn__scope_args" = ss="APP__" ]] || [[ "$termux_core__taiavn__scope_args" = cn="termux-app" ]]; then
            is_termux_app_scope="true"
            termux_version_env_command="unset TERMUX_VERSION;"
        else
            is_termux_app_scope="false"
            termux_version_env_command=""
        fi

        # `--skip-sourcing`.
        get_unset_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "APP_VERSION_NAME" || return $?
        get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "APP_VERSION_NAME" "0.1.0" || return $?
        "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_skip-sourcing_${test_type}_env-unset" \
            "${termux_version_env_command}${NL}${env_command}" \
            "true" "$env_file" \
            0 "^$" \
            get-value "--skip-sourcing" _ "${termux_core__taiavn__scope_args}" || return $?

        get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "APP_VERSION_NAME" "" || return $?
        get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "APP_VERSION_NAME" "0.1.0" || return $?
        "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_skip-sourcing_${test_type}_env-empty" \
            "${termux_version_env_command}${NL}${env_command}" \
            "true" "$env_file" \
            0 "^$" \
            get-value "--skip-sourcing" _ "${termux_core__taiavn__scope_args}" || return $?

        get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "APP_VERSION_NAME" "0.2.0" || return $?
        get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "APP_VERSION_NAME" "0.1.0" || return $?
        "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_skip-sourcing_${test_type}_env-set" \
            "${termux_version_env_command}${NL}${env_command}" \
            "true" "$env_file" \
            0 "^0\.2\.0$" \
            get-value "--skip-sourcing" _ "${termux_core__taiavn__scope_args}" || return $?


        get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "APP_VERSION_NAME" "termux-0.2.0" || return $?
        get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "APP_VERSION_NAME" "termux-0.1.0" || return $?
        "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_skip-sourcing_${test_type}_env-set_custom_validator" \
            "${termux_version_env_command}${NL}${env_command}" \
            "true" "$env_file" \
            0 "^termux-0\.2\.0$" \
            get-value "--skip-sourcing ${termux_core__validator__taiavn_args}" _ "${termux_core__taiavn__scope_args}" || return $?


        get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "APP_VERSION_NAME" "0.1.0" || return $?
        "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_unset-value_main-variable-set" \
            "${termux_version_env_command}${NL}${env_command}" \
            "false" "" \
            0 "^$" \
            unset-value "" "${TERMUX_ENV__S_ROOT}${var_sub_scope_name}APP_VERSION_NAME" "${termux_core__taiavn__scope_args}" || return $?


        # `TERMUX_VERSION`.
        if [[ "$is_termux_app_scope" == "true" ]]; then
            get_unset_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "APP_VERSION_NAME" || return $?
            get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "APP_VERSION_NAME" "0.1.0" || return $?
            "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_skip-sourcing_${test_type}_termux_version-unset_env-unset" \
                "${unset_termux_version_env_command}${NL}${termux_version_env_command}${NL}${env_command}" \
                "true" "$env_file" \
                0 "^$" \
                get-value "--skip-sourcing" _ "${termux_core__taiavn__scope_args}" || return $?

            get_unset_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "APP_VERSION_NAME" || return $?
            get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "APP_VERSION_NAME" "0.1.0" || return $?
            env_command+="${NL}export TERMUX_VERSION='0.2.0';"
            "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_skip-sourcing_${test_type}_termux_version-set_env-set" \
                "${unset_termux_version_env_command}${NL}${termux_version_env_command}${NL}${env_command}" \
                "true" "$env_file" \
                0 "^0\.2\.0$" \
                get-value "--skip-sourcing" _ "${termux_core__taiavn__scope_args}" || return $?

            get_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "$var_sub_scope_name" "APP_VERSION_NAME" "0.1.0" || return $?
            env_command+="${NL}export TERMUX_VERSION='0.2.0';"
            "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_unset-value_termux_version-variable-set" \
                "${termux_version_env_command}${NL}${env_command}" \
                "false" "" \
                0 "^$" \
                unset-value "" "TERMUX_VERSION" "${termux_core__taiavn__scope_args}" || return $?
        fi



        # `--skip-sourcing-if-cur-app-var`.
        get_export_scoped_variable_command env_command "TERMUX_" "ENV__" "S_APP" "${TERMUX_ENV__S_ROOT}${var_sub_scope_name}" || return $?
        append_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "${var_sub_scope_name}" "APP_VERSION_NAME" "0.2.0" || return $?
        get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "${var_sub_scope_name}" "APP_VERSION_NAME" "0.1.0" || return $?
        [[ "$is_termux_app_scope" == "true" ]] && env_command+="${NL}export TERMUX_VERSION='0.3.0';"
        "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_skip-sourcing-if-cur-app-var_${test_type}_env-set_file-set_same-app" \
            "${termux_version_env_command}${NL}${env_command}" \
            "true" "$env_file" \
            0 "^0\.2\.0$" \
            get-value "" _ "${termux_core__taiavn__scope_args}" || return $?

        get_export_scoped_variable_command env_command "TERMUX_" "ENV__" "S_APP" "${TERMUX_ENV__S_ROOT}DIFF_APP__" || return $?
        append_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "${var_sub_scope_name}" "APP_VERSION_NAME" "0.2.0" || return $?
        get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "${var_sub_scope_name}" "APP_VERSION_NAME" "0.1.0" || return $?
        [[ "$is_termux_app_scope" == "true" ]] && env_command+="${NL}export TERMUX_VERSION='0.3.0';"
        "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_skip-sourcing-if-cur-app-var_${test_type}_env-set_file-set_different-app" \
            "${termux_version_env_command}${NL}${env_command}" \
            "true" "$env_file" \
            0 "^0\.1\.0$" \
            get-value "" _ "${termux_core__taiavn__scope_args}" || return $?

        get_export_scoped_variable_command env_command "TERMUX_" "ENV__" "S_APP" "${TERMUX_ENV__S_ROOT}DIFF_APP__" || return $?
        append_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "${var_sub_scope_name}" "APP_VERSION_NAME" "0.2.0" || return $?
        get_unset_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "${var_sub_scope_name}" "APP_VERSION_NAME" || return $?
        "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_skip-sourcing-if-cur-app-var_${test_type}_env-set_file-unset_different-app" \
            "${termux_version_env_command}${NL}${env_command}" \
            "true" "$env_file" \
            0 "^$" \
            get-value "" _ "${termux_core__taiavn__scope_args}" || return $?

        get_export_scoped_variable_command env_command "TERMUX_" "ENV__" "S_APP" "${TERMUX_ENV__S_ROOT}${var_sub_scope_name}" || return $?
        append_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "${var_sub_scope_name}" "APP_VERSION_NAME" "b" || return $?
        get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "${var_sub_scope_name}" "APP_VERSION_NAME" "a" || return $?
        "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_skip-sourcing-if-cur-app-var_${test_type}_env-invalid_file-invalid_same-app" \
            "${termux_version_env_command}${NL}${env_command}" \
            "true" "$env_file" \
            81 "^Failed to find a valid value .*$" \
            get-value "" _ "${termux_core__taiavn__scope_args}" || return $?

        get_export_scoped_variable_command env_command "TERMUX_" "ENV__" "S_APP" "${TERMUX_ENV__S_ROOT}DIFF_APP__" || return $?
        append_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "${var_sub_scope_name}" "APP_VERSION_NAME" "b" || return $?
        get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "${var_sub_scope_name}" "APP_VERSION_NAME" "a" || return $?
        "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_skip-sourcing-if-cur-app-var_${test_type}_env-invalid_file-invalid_different-app" \
            "${termux_version_env_command}${NL}${env_command}" \
            "true" "$env_file" \
            81 "^Failed to find a valid value .*$" \
            get-value "" _ "${termux_core__taiavn__scope_args}" || return $?


        get_export_scoped_variable_command env_command "TERMUX_" "ENV__" "S_APP" "${TERMUX_ENV__S_ROOT}DIFF_APP__" || return $?
        append_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "${var_sub_scope_name}" "APP_VERSION_NAME" "termux-0.2.0" || return $?
        get_export_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "${var_sub_scope_name}" "APP_VERSION_NAME" "termux-0.1.0" || return $?
        "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_skip-sourcing-if-cur-app-var_${test_type}_env-set_file-set_different-app_custom_validator" \
            "${termux_version_env_command}${NL}${env_command}" \
            "true" "$env_file" \
            0 "^termux-0\.1\.0$" \
            get-value "${termux_core__validator__taiavn_args}" _ "${termux_core__taiavn__scope_args}" || return $?


        # `TERMUX_VERSION`.
        if [[ "$is_termux_app_scope" == "true" ]]; then
            get_export_scoped_variable_command env_command "TERMUX_" "ENV__" "S_APP" "${TERMUX_ENV__S_ROOT}${var_sub_scope_name}" || return $?
            append_unset_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "${var_sub_scope_name}" "APP_VERSION_NAME" "0.2.0" || return $?
            get_unset_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "${var_sub_scope_name}" "APP_VERSION_NAME" || return $?
            env_command+="${NL}export TERMUX_VERSION='0.1.0';"
            "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_skip-sourcing-if-cur-app-var_${test_type}_termux_version-set_env-unset_file-unset_same-app" \
                "${unset_termux_version_env_command}${NL}${termux_version_env_command}${NL}${env_command}" \
                "true" "$env_file" \
                0 "^0\.1\.0$" \
                get-value "" _ "${termux_core__taiavn__scope_args}" || return $?

            get_export_scoped_variable_command env_command "TERMUX_" "ENV__" "S_APP" "${TERMUX_ENV__S_ROOT}${var_sub_scope_name}" || return $?
            append_unset_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "${var_sub_scope_name}" "APP_VERSION_NAME" "0.2.0" || return $?
            get_unset_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "${var_sub_scope_name}" "APP_VERSION_NAME" || return $?
            "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_skip-sourcing-if-cur-app-var_${test_type}_termux_version-unset_env-unset_file-unset_same-app" \
                "${unset_termux_version_env_command}${NL}${termux_version_env_command}${NL}${env_command}" \
                "true" "$env_file" \
                0 "^$" \
                get-value "" _ "${termux_core__taiavn__scope_args}" || return $?


            get_export_scoped_variable_command env_command "TERMUX_" "ENV__" "S_APP" "${TERMUX_ENV__S_ROOT}DIFF_APP__" || return $?
            append_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "${var_sub_scope_name}" "APP_VERSION_NAME" "0.2.0" || return $?
            get_unset_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "${var_sub_scope_name}" "APP_VERSION_NAME" || return $?
            env_command+="${NL}export TERMUX_VERSION='0.1.0';"
            "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_skip-sourcing-if-cur-app-var_${test_type}_termux_version-set_env-set_file-unset_different-app" \
                "${unset_termux_version_env_command}${NL}${termux_version_env_command}${NL}${env_command}" \
                "true" "$env_file" \
                0 "^0\.1\.0$" \
                get-value "" _ "${termux_core__taiavn__scope_args}" || return $?

            get_export_scoped_variable_command env_command "TERMUX_" "ENV__" "S_APP" "${TERMUX_ENV__S_ROOT}DIFF_APP__" || return $?
            append_export_scoped_variable_command env_command "$TERMUX_ENV__S_ROOT" "${var_sub_scope_name}" "APP_VERSION_NAME" "0.2.0" || return $?
            get_unset_scoped_variable_command env_file "$TERMUX_ENV__S_ROOT" "${var_sub_scope_name}" "APP_VERSION_NAME" || return $?
            "$TTERMUX_CORE__TESTS__TEST_FUNC__FUNC_NAME" "${test_label}_get-value_skip-sourcing-if-cur-app-var_${test_type}_termux_version-unset_env-set_file-unset_different-app" \
                "${unset_termux_version_env_command}${NL}${termux_version_env_command}${NL}${env_command}" \
                "true" "$env_file" \
                0 "^$" \
                get-value "" _ "${termux_core__taiavn__scope_args}" || return $?
        fi
    done

    return 0

}





##
# `termux_core__tests__run_script_test` `<test_name>` `<test_file_content>`
#   `<expected_exit_code>` `<expected_output_regex>` [`<script_args...>`]
##
termux_core__tests__run_script_test() {

    local return_value

    if [[ $# -lt 4 ]]; then
        termux_core__tests__log_error "Invalid argument count $#. The 'termux_core__tests__run_script_test' command expects at least 4 arguments: \
 test_name test_file_content expected_exit_code expected_output_regex [script_args]"
        return 1
    fi

    local test_name="$1"
    local test_file_content="$2"
    local expected_exit_code="$3"
    local expected_output_regex="$4"
    shift 4 # Remove args before `script_args`

    local output
    local actual_output
    local test_failed="false"

    if [[ -n "$TERMUX_CORE__TESTS__TEST_FILTER" ]] && [[ ! "$test_name" =~ $TERMUX_CORE__TESTS__TEST_FILTER ]]; then
        return 0
    fi

    TERMUX_CORE__TESTS__TESTS_COUNT=$((TERMUX_CORE__TESTS__TESTS_COUNT + 1))

    termux_core__tests__log 5 "$test_name()"
    termux_core__tests__log 5 "TERMUX_CORE__TESTS__SCRIPT_TEST_FILE_PATH='$TERMUX_CORE__TESTS__SCRIPT_TEST_FILE_PATH'"
    if [[ "$test_file_content" == *"${NL}"* ]]; then
        termux_core__tests__log 5 "test_file_content=${NL}"'```'"${NL}$test_file_content${NL}"'```'
    else
        termux_core__tests__log 5 "test_file_content='$test_file_content'"
    fi
    termux_core__tests__log 5 "expected_exit_code='$expected_exit_code'"
    termux_core__tests__log 5 "expected_output_regex='$expected_output_regex'"

    # If TERMUX_CORE__TESTS__SCRIPT_TEST_FILE_PATH is not a valid absolute path.
    if [[ ! "$TERMUX_CORE__TESTS__SCRIPT_TEST_FILE_PATH" =~ $TERMUX_CORE__TESTS__REGEX__ABSOLUTE_PATH ]]; then
        termux_core__tests__log_error "The TERMUX_CORE__TESTS__SCRIPT_TEST_FILE_PATH '$TERMUX_CORE__TESTS__SCRIPT_TEST_FILE_PATH' is not a valid absolute path"
        return 1
    fi

    rm -f "$TERMUX_CORE__TESTS__SCRIPT_TEST_FILE_PATH" || return $?

    output="$(printf "%s" "$test_file_content" > "$TERMUX_CORE__TESTS__SCRIPT_TEST_FILE_PATH" 2>&1)"
    return_value=$?
    if [ $return_value -ne 0 ]; then
        termux_core__tests__log_error "$output"
        termux_core__tests__log_error "Failed to create the '$TERMUX_CORE__TESTS__SCRIPT_TEST_FILE_PATH' file for the '$test_name' test"
        return $return_value
    fi

    output="$(chmod +x "$TERMUX_CORE__TESTS__SCRIPT_TEST_FILE_PATH" 2>&1)"
    return_value=$?
    if [ $return_value -ne 0 ]; then
        termux_core__tests__log_error "$output"
        termux_core__tests__log_error "Failed to set the executable bit for the '$TERMUX_CORE__TESTS__SCRIPT_TEST_FILE_PATH' file for the '$test_name' test"
        return $return_value
    fi

    actual_output="$("$TERMUX_CORE__TESTS__SCRIPT_TEST_FILE_PATH" "$@" 2>&1)"
    actual_exit_code=$?
    if [[ -n "$expected_output_regex" ]] && [[ ! "$actual_output" =~ $expected_output_regex ]]; then
        termux_core__tests__log_error "FAILED: '$test_name' test"
        termux_core__tests__log_error "Expected output_regex does not equal match actual output"
        test_failed="true"
    elif [ $actual_exit_code != "$expected_exit_code" ]; then
        termux_core__tests__log_error "$actual_output"
        termux_core__tests__log_error "FAILED: '$test_name' test"
        termux_core__tests__log_error "Expected result_code does not equal actual result_code"
        test_failed="true"
    fi

    if [[ "$test_failed" == "true" ]]; then
        if [[ "$test_file_content" == *"${NL}"* ]]; then
            termux_core__tests__log_error "test_file_content=${NL}"'```'"${NL}$test_file_content${NL}"'```'
        else
            termux_core__tests__log_error "test_file_content='$test_file_content'"
        fi
        termux_core__tests__log_error "actual_exit_code: '$actual_exit_code'"
        termux_core__tests__log_error "expected_exit_code: '$expected_exit_code'"
        termux_core__tests__log_error "actual_output: '$actual_output'"
        termux_core__tests__log_error "expected_output_regex: '$expected_output_regex'"
        return 100
    else
        #termux_core__tests__log 2 "PASSED"

        # Remove test file so that later tests do not accidentally use it.
        rm -f "$TERMUX_CORE__TESTS__SCRIPT_TEST_FILE_PATH" || return $?

        return 0
    fi

}





##
# `get_export_scoped_variable_command` `<output_variable_name>` \
#     `<var_root_scope_name>` `<var_sub_scope_name>` `<var_sub_name>` \
#     `<var_value>`
##
get_export_scoped_variable_command() {

    termux_core__tests__validate_argument_count eq $# 5 get_export_scoped_variable_command "$@" || return $?

    local output_variable_name="$1"
    local var_root_scope_name="$2"
    local var_sub_scope_name="$3"
    local var_sub_name="$4"
    local var_value="$5"

    printf -v "$output_variable_name" "%s" \
        "export ${var_root_scope_name}${var_sub_scope_name}${var_sub_name}='${var_value//\'/\'\\\'\'}';" || return $?

    return 0

}

##
# `append_export_scoped_variable_command` `<output_variable_name>` \
#     `<var_root_scope_name>` `<var_sub_scope_name>` `<var_sub_name>` \
#     `<var_value>`
##
append_export_scoped_variable_command() {

    termux_core__tests__validate_argument_count eq $# 5 append_export_scoped_variable_command "$@" || return $?

    local output_variable_name="$1"
    local var_root_scope_name="$2"
    local var_sub_scope_name="$3"
    local var_sub_name="$4"
    local var_value="$5"

    local __command

    get_export_scoped_variable_command __command "$var_root_scope_name" "$var_sub_scope_name" "$var_sub_name" "$var_value" || return $?

    printf -v "$output_variable_name" "%s" \
        "${!output_variable_name:-}${NL}${__command}" || return $?

    return 0

}



##
# `get_unset_scoped_variable_command` `<output_variable_name>` \
#     `<var_root_scope_name>` `<var_sub_scope_name>` `<var_sub_name>`
##
get_unset_scoped_variable_command() {

    termux_core__tests__validate_argument_count eq $# 4 get_unset_scoped_variable_command "$@" || return $?

    local output_variable_name="$1"
    local var_root_scope_name="$2"
    local var_sub_scope_name="$3"
    local var_sub_name="$4"

    printf -v "$output_variable_name" "%s" \
        "unset ${var_root_scope_name}${var_sub_scope_name}${var_sub_name};" || return $?

    return 0

}

##
# `append_unset_scoped_variable_command` `<output_variable_name>` \
#     `<var_root_scope_name>` `<var_sub_scope_name>` `<var_sub_name>`
##
append_unset_scoped_variable_command() {

    termux_core__tests__validate_argument_count eq $# 4 append_unset_scoped_variable_command "$@" || return $?

    local output_variable_name="$1"
    local var_root_scope_name="$2"
    local var_sub_scope_name="$3"
    local var_sub_name="$4"

    local __command

    get_unset_scoped_variable_command __command "$var_root_scope_name" "$var_sub_scope_name" "$var_sub_name" || return $?

    printf -v "$output_variable_name" "%s" \
        "${!output_variable_name:-}${NL}${__command}" || return $?

    return 0

}





##
# Source a file under `$PATH`, like under `TERMUX__PREFIX/bin`.
#
# A separate function is used to source so that arguments passed to
# calling script/function are not passed to the sourced script.
#
#
# termux_core__tests__source_file_from_path <file_name>
##
termux_core__tests__source_file_from_path() {

    local source_file="${1:-}"; [ $# -gt 0 ] && shift 1;

    local source_path

    if source_path="$(command -v "$source_file")" && [ -n "$source_path" ]; then
        # shellcheck disable=SC1090
        source "$source_path" || return $?
    else
        echo "Failed to find the '$source_file' file to source." 1>&2
        return 1
    fi

}





##
# Copy the value of a variable to another variable.
#
#
# **Parameters:**
# `output_variable_name` - The name of the output variable to set.
# `input_variable_name` - The name of the input variable to read.
#
# **Returns:**
# Returns `0` if successful, otherwise returns with a non-zero exit code.
#
#
# `termux_core__tests__copy_variable` `<output_variable_name>` `<input_variable_name>`
##
termux_core__tests__copy_variable() {

    local output_variable_name="${1:-}"
    local input_variable_name="${2:-}"

    if [[ ! "$output_variable_name" =~ ^[a-zA-Z_][a-zA-Z0-9_]*$ ]]; then
        echo "The output_variable_name '$output_variable_name' is not a valid shell variable name while running 'termux_core__tests__copy_variable'." 1>&2
        return 1
    fi

    if [[ ! "$input_variable_name" =~ ^[a-zA-Z_][a-zA-Z0-9_]*$ ]]; then
        echo "The input_variable_name '$input_variable_name' is not a valid shell variable name while running 'termux_core__tests__copy_variable'." 1>&2
        return 1
    fi

    eval "$output_variable_name"=\"\$\{"$input_variable_name":-\}\"

}





##
# Escape '\$[](){}|^.?+*' in a string with backslashes so that it can
# be used as a literal string in regex.
#
#
# `termux_core__tests__escape_string_for_regex` `<string>`
##
termux_core__tests__escape_string_for_regex() {

    printf "%s" "$1" | sed -zE -e 's/[][\.|$(){}?+*^]/\\&/g'

}





##
# `termux_core__tests__get_arguments_string` `<output_variable_name>` `<arguments...>`
##
termux_core__tests__get_arguments_string() {

    local output_variable_name="${1:-}"
    shift 1

    local argument
    local __arguments_string=""
    local i=1

    while [ $# -ne 0 ]; do
        argument="$1"
        __arguments_string="$__arguments_string$i: \`$argument\`"

        if [ $# -gt 1 ]; then
            __arguments_string="$__arguments_string$NL"
        fi

        i=$((i + 1))
        shift
    done

    printf -v "$output_variable_name" "%s" "$__arguments_string" || return $?

}

##
# `termux_core__tests__print_arguments_string` `<arguments...>`
##
termux_core__tests__print_arguments_string() {

    local arguments_string=""
    termux_core__tests__get_arguments_string arguments_string "$@" || return $?
     printf "%s\n" "$arguments_string"

}

##
# `termux_core__tests__validate_argument_count` `eq`|`lt`|`le`|`gt`|`ge` `<arguments_received_count>` `<arguments_actual>` `<label>` [`<arguments_received>`]
# `termux_core__tests__validate_argument_count` `or` `<arguments_received_count>` `<arguments_actual_1>` `<arguments_actual_2>` `<label>` [`<arguments_received>`]
# `termux_core__tests__validate_argument_count` `between` `<arguments_received_count>` `<arguments_actual_min>` `<arguments_actual_max>` `<label>` [`<arguments_received>`]
##
termux_core__tests__validate_argument_count() {

    local return_value=0

    case "$1" in
        eq) if [ "$2" -eq "$3" ]; then :; else
                local label="$4"; case "$label" in *[!a-zA-Z0-9_-]*) :;; *) label="'$label'";;esac;
                termux_core__tests__log_error "Invalid argument count '$2' to $label. Expected '$3' argument(s)."; shift 4; return_value=1; fi;;
        lt) if [ "$2" -lt "$3" ]; then :; else
                local label="$4"; case "$label" in *[!a-zA-Z0-9_-]*) :;; *) label="'$label'";;esac;
                termux_core__tests__log_error "Invalid argument count '$2' to $label. Expected less than '$3' argument(s)."; shift 4; return_value=1; fi;;
        le) if [ "$2" -le "$3" ]; then :; else
                local label="$4"; case "$label" in *[!a-zA-Z0-9_-]*) :;; *) label="'$label'";;esac;
                termux_core__tests__log_error "Invalid argument count '$2' to $label. Expected less than or equal to '$3' argument(s)."; shift 4; return_value=1; fi;;
        gt) if [ "$2" -gt "$3" ]; then :; else
                local label="$4"; case "$label" in *[!a-zA-Z0-9_-]*) :;; *) label="'$label'";;esac;
                termux_core__tests__log_error "Invalid argument count '$2' to $label. Expected greater than '$3' argument(s)."; shift 4; return_value=1; fi;;
        ge) if [ "$2" -ge "$3" ]; then :; else
                local label="$4"; case "$label" in *[!a-zA-Z0-9_-]*) :;; *) label="'$label'";;esac;
                termux_core__tests__log_error "Invalid argument count '$2' to $label. Expected greater than or equal to '$3' argument(s)."; shift 4; return_value=1; fi;;
        or) if [ "$2" -eq "$3" ] || [ "$2" -eq "$4" ]; then :; else
                local label="$5"; case "$label" in *[!a-zA-Z0-9_-]*) :;; *) label="'$label'";;esac;
                termux_core__tests__log_error "Invalid argument count '$2' to $label. Expected '$3' or '$4' argument(s)."; shift 5; return_value=1; fi;;
        between) if [ "$2" -ge "$3" ] && [ "$2" -le "$4" ]; then :; else
                local label="$5"; case "$label" in *[!a-zA-Z0-9_-]*) :;; *) label="'$label'";;esac;
                termux_core__tests__log_error "Invalid argument count '$2' to $label. Expected between '$3' and '$4' (inclusive) argument(s)."; shift 5; return_value=1; fi;;
        *)
            termux_core__tests__log_error "The comparison '$1' while running 'termux_core__tests__validate_argument_count' is invalid"; return 1;;
    esac

    [ $return_value -eq 0 ] && return 0

    if [ $# -gt 0 ]; then
        termux_core__tests__print_arguments_string "$@" || return $?
    fi

    return $return_value

}





##
# Set exit traps to `termux_core__tests__traps()`.
##
termux_core__tests__set_traps() {

    # Set traps to `termux_core__tests__traps`.
    trap 'termux_core__tests__traps' EXIT
    trap 'termux_core__tests__traps TERM' TERM
    trap 'termux_core__tests__traps INT' INT
    trap 'termux_core__tests__traps HUP' HUP
    trap 'termux_core__tests__traps QUIT' QUIT

    return 0

}

termux_core__tests__traps_killtree() {

    local signal="$1"; local pid="$2"; local cpid
    for cpid in $(pgrep -P "$pid"); do termux_core__tests__traps_killtree "$signal" "$cpid"; done
    [[ "$pid" != "$$" ]] && signal="${signal:=15}"; kill "-$signal" "$pid" 2>/dev/null

}

termux_core__tests__traps() {

    local exit_code=$?
    trap - EXIT

    if [[ "${TERMUX_CORE__TESTS__TMPDIR_PATH:-}" =~ ^(/[^/]+)+$ ]] && [[ "$TERMUX_CORE__TESTS__NO_CLEAN" != "true" ]]; then
        rm -rf "$TERMUX_CORE__TESTS__TMPDIR_PATH"
    fi

    [ -n "$1" ] && trap - "$1";
    termux_core__tests__traps_killtree "$1" $$;
    exit $exit_code

}





##
# `termux_core__tests__process_script_arguments` [`<argument...>`]
##
termux_core__tests__process_script_arguments() {

    local opt; local opt_arg; local OPTARG; local OPTIND

    if [ $# -eq 0 ]; then
        TERMUX_CORE__TESTS__COMMAND_TYPE_NOOP="true"
        show_help; return $?
    fi

    # Parse options to main command.
    while getopts ":hqv-:" opt; do
        opt_arg="${OPTARG:-}"
        case "${opt}" in
            -)
                case "${OPTARG}" in *?=*) opt_arg="${OPTARG#*=}";; *) opt_arg="";; esac
                case "${OPTARG}" in
                    help)
                        TERMUX_CORE__TESTS__COMMAND_TYPE_NOOP="true"
                        show_help; return $?
                        ;;
                    version)
                        TERMUX_CORE__TESTS__COMMAND_TYPE_NOOP="true"
                        echo "@TERMUX_CORE_PKG__VERSION@"; return $?
                        ;;
                    quiet)
                        TERMUX_CORE__TESTS__LOG_LEVEL=0
                        ;;
                    no-clean)
                        TERMUX_CORE__TESTS__NO_CLEAN="true"
                        ;;
                    test-filter=?*)
                        TERMUX_CORE__TESTS__TEST_FILTER="$opt_arg" || return $?
                        ;;
                    test-filter | test-filter=)
                        termux_core__tests__log_error "No parameters set for option: '--${OPTARG%=*}'"
                        return 1
                        ;;
                    tests-path=?*)
                        TERMUX_CORE__TESTS__TESTS_PATH="$(readlink -f -- "$opt_arg")" || return $?
                        ;;
                    tests-path | tests-path=)
                        termux_core__tests__log_error "No parameters set for option: '--${OPTARG%=*}'"
                        return 1
                        ;;
                    '')
                        # End of options `--`.
                        break
                        ;;
                    *)
                        termux_core__tests__log_error "Unknown option: '--${OPTARG:-}'."
                        return 1
                        ;;
                esac
                ;;
            h)
                TERMUX_CORE__TESTS__COMMAND_TYPE_NOOP="true"
                show_help; return $?
                ;;
            q)
                TERMUX_CORE__TESTS__LOG_LEVEL=0
                ;;
            v)
                if [ "$TERMUX_CORE__TESTS__LOG_LEVEL" -lt "$TERMUX_CORE__TESTS__MAX_LOG_LEVEL" ]; then
                    TERMUX_CORE__TESTS__LOG_LEVEL=$((TERMUX_CORE__TESTS__LOG_LEVEL+1));
                else
                    termux_core__tests__log_error "Invalid option, max log level is $TERMUX_CORE__TESTS__MAX_LOG_LEVEL"
                    return 1
                fi
                ;;
            \?)
                :;;
        esac
    done
    shift $((OPTIND - 1)) # Remove already processed arguments from argument list

    if [ $# -eq 0 ]; then
        termux_core__tests__log_error "The command type not passed."
        return 1
    elif [ $# -ne 1 ]; then
        termux_core__tests__log_error "Expected 1 argument for command type but passed: $*"
        return 1
    fi

    TERMUX_CORE__TESTS__COMMAND_TYPE_ID="$1"

    return 0;

}

##
# `show_help`
##
show_help() {

    cat <<'HELP_EOF'
termux-core-tests is a script that run tests for the termux-core.


Usage:
    termux-core-tests [command_options] <command>

Available commands:
    runtime                   Run runtime on-device tests.
    all                       Run all tests.

Available command_options:
    [ -h | --help ]           Display this help screen.
    [ --version ]             Display version.
    [ -q | --quiet ]          Set log level to 'OFF'.
    [ -v | -vv | -vvv | -vvvvv ]
                              Set log level to 'DEBUG', 'VERBOSE',
                              'VVERBOSE' and 'VVVERBOSE'.
    [ --no-clean ]            Do not clean test files on failure.
    [ --tests-filter=<filter> ]
                              Regex to filter which tests to run.
    [ --tests-path=<path> ]   The path to installed-tests directory.
HELP_EOF

}

# If script is sourced, return with success, otherwise call main function.
# - https://stackoverflow.com/a/28776166/14686958
# - https://stackoverflow.com/a/29835459/14686958
if (return 0 2>/dev/null); then
    return 0 # EX__SUCCESS
else
    termux_core__tests__main "$@"
    exit $?
fi
